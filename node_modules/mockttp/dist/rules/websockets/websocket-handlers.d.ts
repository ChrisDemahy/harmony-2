/**
 * @module MockWebsocketRule
 */
/// <reference types="node" />
import net = require('net');
import { Serializable } from "../../util/serialization";
import { OngoingRequest, Explainable } from "../../types";
import { CloseConnectionHandler, TimeoutHandler, ForwardingOptions, PassThroughLookupOptions } from '../requests/request-handlers';
export interface WebSocketHandler extends Explainable, Serializable {
    type: keyof typeof WsHandlerLookup;
    handle(request: OngoingRequest, socket: net.Socket, head: Buffer): Promise<void>;
}
export interface PassThroughWebSocketHandlerOptions {
    /**
     * The forwarding configuration for the passthrough rule.
     * This generally shouldn't be used explicitly unless you're
     * building rule data by hand. Instead, call `thenPassThrough`
     * to send data directly or `thenForwardTo` with options to
     * configure traffic forwarding.
     */
    forwarding?: ForwardingOptions;
    /**
     * A list of hostnames for which server certificate errors should be
     * ignored (none, by default).
     */
    ignoreHostCertificateErrors?: string[];
    /**
     * Custom DNS options, to allow configuration of the resolver used
     * when forwarding requests upstream. Passing any option switches
     * from using node's default dns.lookup function to using the
     * cacheable-lookup module, which will cache responses.
     */
    lookupOptions?: PassThroughLookupOptions;
}
export declare class PassThroughWebSocketHandler extends Serializable implements WebSocketHandler {
    readonly type = "ws-passthrough";
    readonly forwarding?: ForwardingOptions;
    readonly ignoreHostCertificateErrors: string[];
    private wsServer?;
    readonly lookupOptions: PassThroughLookupOptions | undefined;
    private _cacheableLookupInstance;
    private lookup;
    constructor(options?: PassThroughWebSocketHandlerOptions);
    explain(): string;
    private initializeWsServer;
    handle(req: OngoingRequest, socket: net.Socket, head: Buffer): Promise<void>;
    private connectUpstream;
}
export { CloseConnectionHandler, TimeoutHandler };
export declare const WsHandlerLookup: {
    'ws-passthrough': typeof PassThroughWebSocketHandler;
    'close-connection': typeof CloseConnectionHandler;
    'timeout': typeof TimeoutHandler;
};
