/**
 * @module MockRule
 */
import { OngoingRequest, CompletedRequest, OngoingResponse, Explainable } from "../../types";
import { MaybePromise } from '../../util/type-utils';
import * as matchers from "../matchers";
import * as handlers from "./request-handlers";
import * as completionCheckers from "../completion-checkers";
export interface RequestRule extends Explainable {
    id: string;
    requests: Promise<CompletedRequest>[];
    matches(request: OngoingRequest): MaybePromise<boolean>;
    handle(request: OngoingRequest, response: OngoingResponse, record: boolean): Promise<void>;
    isComplete(): boolean | null;
}
export interface RequestRuleData {
    id?: string;
    matchers: matchers.RequestMatcher[];
    handler: handlers.RequestHandler;
    completionChecker?: completionCheckers.RuleCompletionChecker;
}
export declare class RequestRule implements RequestRule {
    private matchers;
    private handler;
    private completionChecker?;
    id: string;
    requests: Promise<CompletedRequest>[];
    requestCount: number;
    constructor(data: RequestRuleData);
    explain(withoutExactCompletion?: boolean): string;
    dispose(): void;
}
