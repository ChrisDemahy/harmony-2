"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliDaemon = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const proper_lockfile_1 = __importDefault(require("proper-lockfile"));
const cli_shared_1 = require("@useoptic/cli-shared");
const server_1 = require("./server");
class CliDaemon {
    constructor(config) {
        this.config = config;
    }
    async start() {
        await this.acquireInstanceLock();
        const output = await this.startApiServer();
        console.log(JSON.stringify(output));
        return output;
    }
    async acquireInstanceLock() {
        console.log(`acquiring lock`);
        this.releaseLock = await proper_lockfile_1.default.lock(this.config.lockFilePath, {
            retries: 3,
        });
        console.log(`acquired lock`);
        const fileExists = await fs_extra_1.default.pathExists(this.config.lockFilePath);
        if (fileExists) {
            console.log(`something exists at lock, deleting`);
            await fs_extra_1.default.unlink(this.config.lockFilePath);
        }
    }
    async releaseInstanceLock() {
        await this.releaseLock();
        await fs_extra_1.default.unlink(this.config.lockFilePath);
    }
    async startApiServer() {
        this.apiServer = new server_1.CliServer({
            cloudApiBaseUrl: this.config.cloudApiBaseUrl,
        });
        this.apiServer.events.on(server_1.shutdownRequested, () => {
            cli_shared_1.userDebugLogger('shutting down daemon');
            this.stop();
        });
        const apiServerInfo = await this.apiServer.start();
        const lockFileInfo = Object.assign(Object.assign({}, apiServerInfo), { pid: process.pid });
        await fs_extra_1.default.writeJson(this.config.lockFilePath, lockFileInfo);
        return apiServerInfo;
    }
    async stopApiServer() {
        if (this.apiServer) {
            await this.apiServer.stop();
        }
    }
    async stop() {
        await this.stopApiServer();
        await this.releaseInstanceLock();
        process.exit(0);
    }
}
exports.CliDaemon = CliDaemon;
