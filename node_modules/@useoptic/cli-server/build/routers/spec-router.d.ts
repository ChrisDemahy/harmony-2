import { IOpticTaskRunnerConfig } from '@useoptic/cli-config';
import express from 'express';
import { SessionsManager } from '../sessions';
declare type CaptureId = string;
declare type Iso8601Timestamp = string;
export declare type InvalidCaptureState = {
    captureId: CaptureId;
    status: 'unknown';
};
export declare function isValidCaptureState(x: CaptureState): x is ValidCaptureState;
export declare type ValidCaptureState = {
    captureId: CaptureId;
    status: 'started' | 'completed';
    metadata: {
        taskConfig: IOpticTaskRunnerConfig;
        startedAt: Iso8601Timestamp;
        lastInteraction: {
            count: number;
            observedAt: Iso8601Timestamp;
        } | null;
    };
};
export declare type CaptureState = InvalidCaptureState | ValidCaptureState;
export declare class CapturesHelpers {
    private basePath;
    constructor(basePath: string);
    validateCaptureId(req: express.Request, res: express.Response, next: express.NextFunction): Promise<void | express.Response<any>>;
    listCaptureIds(): Promise<CaptureId[]>;
    loadCaptureState(captureId: CaptureId): Promise<CaptureState>;
    updateCaptureState(state: CaptureState): Promise<void>;
    listCapturesState(): Promise<CaptureState[]>;
    loadCaptureSummary(captureId: CaptureId): Promise<any>;
    stateFile(captureId: CaptureId): string;
    captureDirectory(captureId: CaptureId): string;
}
export declare class ExampleRequestsHelpers {
    private basePath;
    constructor(basePath: string);
    exampleFile(requestId: string): string;
    getExampleRequests(requestId: string): Promise<any>;
    saveExampleRequest(requestId: string, example: any): Promise<void>;
}
export declare function makeRouter(sessions: SessionsManager): import("express-serve-static-core").Router;
export {};
//# sourceMappingURL=spec-router.d.ts.map