"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const daemon_1 = require("./daemon");
const fs_extra_1 = __importDefault(require("fs-extra"));
const cli_shared_1 = require("@useoptic/cli-shared");
const dotenv_1 = __importDefault(require("dotenv"));
const path_1 = __importDefault(require("path"));
const config_1 = __importDefault(require("./config"));
const Errors = __importStar(require("./errors"));
const envPath = process.env.OPTIC_DEBUG_ENV_FILE || path_1.default.join(__dirname, '..', '.env');
dotenv_1.default.config({
    path: envPath,
});
if (config_1.default.errors.sentry) {
    console.log('Sentry is enabled');
    Errors.trackWithSentry(config_1.default.errors.sentry);
    console.log('Remote error tracking with Sentry enabled');
}
else {
    console.log('Sentry is disabled');
}
console.log('starting daemon', process.argv, process.env.DEBUG);
console.log(process.cwd(), __dirname, __filename);
const [, , lockFilePath, sentinelFilePath, cloudApiBaseUrl] = process.argv;
if (!lockFilePath) {
    throw new Error(`missing lockFilePath`);
}
if (!sentinelFilePath) {
    throw new Error(`missing sentinelFilePath`);
}
if (!cloudApiBaseUrl) {
    throw new Error(`missing cloudApiBaseUrl`);
}
cli_shared_1.userDebugLogger(`daemon lock file ${lockFilePath}`);
const daemon = new daemon_1.CliDaemon({ lockFilePath, cloudApiBaseUrl });
daemon
    .start()
    .then(async (result) => {
    cli_shared_1.userDebugLogger(`daemon started on port ${result.port}`);
    await fs_extra_1.default.writeJson(sentinelFilePath, result);
})
    .catch((e) => {
    console.error(e);
    throw e;
});
