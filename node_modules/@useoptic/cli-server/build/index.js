"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliDaemon = exports.ensureDaemonStopped = exports.ensureDaemonStarted = void 0;
const cli_client_1 = require("@useoptic/cli-client");
const proper_lockfile_1 = __importDefault(require("proper-lockfile"));
const daemon_1 = require("./daemon");
Object.defineProperty(exports, "CliDaemon", { enumerable: true, get: function () { return daemon_1.CliDaemon; } });
const child_process_1 = require("child_process");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const find_process_1 = __importDefault(require("find-process"));
const uuid = __importStar(require("uuid"));
const cli_shared_1 = require("@useoptic/cli-shared");
const process_exists_1 = __importDefault(require("process-exists"));
// @ts-ignore
const is_port_reachable_1 = __importDefault(require("is-port-reachable"));
//@REFACTOR with xstate
async function waitForFile(path, options) {
    let fileWatcherIsDone = false;
    const timeout = cli_shared_1.delay(options.timeoutMilliseconds).then(() => {
        if (fileWatcherIsDone) {
            return;
        }
        cli_shared_1.developerDebugLogger('timed out waiting for file');
        return Promise.reject(new Error('timed out waiting for file'));
    });
    const fileWatcher = new Promise((resolve, reject) => {
        const intervalId = setInterval(() => {
            const exists = fs_extra_1.default.existsSync(path);
            if (exists) {
                cli_shared_1.developerDebugLogger('saw file!');
                clearInterval(intervalId);
                fileWatcherIsDone = true;
                resolve();
            }
            else {
                cli_shared_1.developerDebugLogger('did not see file, polling');
            }
        }, options.intervalMilliseconds);
        timeout.finally(() => {
            if (fileWatcherIsDone) {
                return;
            }
            clearInterval(intervalId);
        });
    });
    return Promise.race([timeout, fileWatcher]);
}
async function ensureDaemonStarted(lockFilePath, cloudApiBaseUrl) {
    const fileExisted = await fs_extra_1.default.pathExists(lockFilePath);
    if (!fileExisted) {
        await fs_extra_1.default.ensureFile(lockFilePath);
        await fs_extra_1.default.writeJson(lockFilePath, {});
    }
    await fs_extra_1.default.ensureDir(path_1.default.dirname(lockFilePath));
    const isLocked = await proper_lockfile_1.default.check(lockFilePath);
    cli_shared_1.developerDebugLogger({ isLocked });
    let shouldStartDaemon = true;
    if (isLocked) {
        if (!fileExisted) {
            cli_shared_1.developerDebugLogger('lockfile was missing but locked');
            throw new Error(`did not expect lockfile to be locked when lockfile did not exist`);
        }
        //@GOTCHA: check to make sure the lockfile is accurate.
        // The lockfile can be inaccurate when the daemon does not cleanly exit; for example, an abrupt system shutdown or force killing the daemon
        const { port, pid } = await fs_extra_1.default.readJson(lockFilePath);
        try {
            cli_shared_1.developerDebugLogger(`checking port ${port} and pid ${pid}`);
            const [foundMatchingProcess, foundReachablePort] = await Promise.all([
                process_exists_1.default(pid),
                is_port_reachable_1.default(port),
            ]);
            if (foundMatchingProcess && foundReachablePort) {
                cli_shared_1.developerDebugLogger('the lockfile seems accurate');
                shouldStartDaemon = false;
            }
            else {
                cli_shared_1.developerDebugLogger('the lockfile is not accurate');
                shouldStartDaemon = true;
            }
        }
        catch (e) {
            cli_shared_1.developerDebugLogger('the lockfile is not accurate');
            cli_shared_1.developerDebugLogger(e.message);
            shouldStartDaemon = true;
        }
    }
    if (shouldStartDaemon) {
        const isDebuggingEnabled = process.env.OPTIC_DAEMON_ENABLE_DEBUGGING === 'yes';
        if (isDebuggingEnabled) {
            cli_shared_1.developerDebugLogger(`node --inspect debugging enabled. go to chrome://inspect and open the node debugger`);
        }
        const sentinelFileName = `optic-daemon-sentinel_${uuid.v4()}`;
        const sentinelFilePath = path_1.default.join(path_1.default.dirname(lockFilePath), sentinelFileName);
        // fork process
        const child = child_process_1.fork(path_1.default.join(__dirname, 'main'), [lockFilePath, sentinelFilePath, cloudApiBaseUrl], {
            execArgv: isDebuggingEnabled ? ['--inspect'] : [],
            detached: true,
            stdio: 'ignore',
        });
        child.unref();
        child.on('error', (e) => {
            cli_shared_1.developerDebugLogger(e);
            throw e;
        });
        child.on('exit', (code, signal) => {
            cli_shared_1.developerDebugLogger(`daemon exited with code ${code} and signal ${signal}`);
            throw new Error(`daemon exited prematurely`);
        });
        await new Promise(async (resolve, reject) => {
            cli_shared_1.developerDebugLogger(`waiting for lock from pid=${child.pid} sentinel file ${sentinelFilePath}`);
            try {
                await waitForFile(sentinelFilePath, {
                    intervalMilliseconds: 50,
                    timeoutMilliseconds: 10000,
                });
                await fs_extra_1.default.unlink(sentinelFilePath);
                cli_shared_1.developerDebugLogger(`lock created from pid=${child.pid}`);
                resolve();
            }
            catch (e) {
                reject(e);
            }
        });
    }
    cli_shared_1.developerDebugLogger(`trying to read lockfile contents`);
    const contents = await fs_extra_1.default.readJson(lockFilePath);
    cli_shared_1.developerDebugLogger(`lockfile contents: ${JSON.stringify(contents)}`);
    return contents;
}
exports.ensureDaemonStarted = ensureDaemonStarted;
async function ensureDaemonStopped(lockFilePath) {
    const fileExists = await fs_extra_1.default.pathExists(lockFilePath);
    if (!fileExists) {
        cli_shared_1.developerDebugLogger('lockfile not present');
        return;
    }
    const isLocked = await proper_lockfile_1.default.check(lockFilePath);
    if (!isLocked) {
        cli_shared_1.developerDebugLogger('lockfile present but not locked');
        return;
    }
    const contents = await fs_extra_1.default.readJson(lockFilePath);
    const { port } = contents;
    const apiBaseUrl = `http://localhost:${port}/admin-api`;
    const cliClient = new cli_client_1.Client(apiBaseUrl);
    try {
        cli_shared_1.developerDebugLogger('sending shutdown request');
        await cliClient.stopDaemon();
        cli_shared_1.developerDebugLogger('sent shutdown request');
    }
    catch (e) {
        cli_shared_1.developerDebugLogger(e);
        try {
            await proper_lockfile_1.default.unlock(lockFilePath);
        }
        catch (e) {
            cli_shared_1.developerDebugLogger(e);
            const blockers = await find_process_1.default('port', port);
            if (blockers.length > 0) {
                cli_shared_1.developerDebugLogger(blockers);
                blockers.forEach((b) => {
                    cli_shared_1.developerDebugLogger(`killing PID ${b.pid}`);
                    process.kill(b.pid, 9);
                });
            }
        }
        await fs_extra_1.default.unlink(lockFilePath);
    }
}
exports.ensureDaemonStopped = ensureDaemonStopped;
