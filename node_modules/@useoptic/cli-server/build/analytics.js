"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCredentials = exports.analyticsEventEmitter = exports.track = void 0;
const eventbus_1 = require("@useoptic/analytics/lib/eventbus");
//@ts-ignore
const analytics_node_1 = __importDefault(require("analytics-node"));
//@ts-ignore
const jwt_decode_1 = __importDefault(require("jwt-decode"));
const consistentAnonymousId_1 = require("@useoptic/analytics/lib/consistentAnonymousId");
//@ts-ignore
const nice_try_1 = __importDefault(require("nice-try"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const packageJson = require('../package.json');
const clientId = `local_cli_${packageJson.version}`;
//event bus for tracking events
const analyticsEvents = eventbus_1.newAnalyticsEventBus(async (batchId) => {
    const user = await getCredentials();
    const decodedSub = nice_try_1.default(() => jwt_decode_1.default(user.token).sub);
    const clientAgent = decodedSub ? decodedSub : consistentAnonymousId_1.consistentAnonymousId;
    const clientContext = {
        clientAgent: clientAgent,
        clientId: clientId,
        clientSessionInstanceId: batchId,
        clientTimestamp: new Date().toISOString(),
    };
    return clientContext;
});
function track(...events) {
    analyticsEvents.emit(...events);
}
exports.track = track;
exports.analyticsEventEmitter = analyticsEvents.eventEmitter;
const inDevelopment = process.env.OPTIC_DEVELOPMENT === 'yes';
// segment io sink
const token = 'RvYGmY1bZqlbMukS8pP9DPEifG6CEBEs';
const analytics = new analytics_node_1.default(token);
analyticsEvents.listen((event) => {
    if (inDevelopment)
        return;
    const properties = Object.assign(Object.assign({}, event.data), event.context);
    analytics.track({
        userId: event.context.clientAgent,
        event: event.type,
        properties,
    });
});
// lookup credentials
const opticrcPath = path_1.default.resolve(os_1.default.homedir(), '.opticrc');
async function getCredentials() {
    try {
        const storage = await fs_extra_1.default.readJSON(opticrcPath);
        if (storage.idToken) {
            return { token: storage.idToken };
        }
        return null;
    }
    catch (e) {
        return null;
    }
}
exports.getCredentials = getCredentials;
