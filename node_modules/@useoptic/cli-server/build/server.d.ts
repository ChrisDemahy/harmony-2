/// <reference types="node" />
import { IApiCliConfig, IPathMapping } from '@useoptic/cli-config';
import { EventEmitter } from 'events';
import express from 'express';
import { CapturesHelpers, ExampleRequestsHelpers } from './routers/spec-router';
import { IgnoreFileHelper } from '@useoptic/cli-config/build/helpers/ignore-file-interface';
import { Session } from './sessions';
export interface ICliServerConfig {
    cloudApiBaseUrl: string;
}
export interface IOpticExpressRequestAdditions {
    paths: IPathMapping;
    config: IApiCliConfig;
    capturesHelpers: CapturesHelpers;
    ignoreHelper: IgnoreFileHelper;
    exampleRequestsHelpers: ExampleRequestsHelpers;
    session: Session;
}
declare global {
    namespace Express {
        interface Request {
            optic: IOpticExpressRequestAdditions;
        }
    }
}
export interface ICliServerSession {
    id: string;
    path: string;
}
export declare const shutdownRequested = "cli-server:shutdown-requested";
declare class CliServer {
    private config;
    private server;
    events: EventEmitter;
    private connections;
    private corsOptions;
    constructor(config: ICliServerConfig);
    addUiServer(app: express.Application): void;
    makeServer(): Promise<import("express-serve-static-core").Express>;
    start(): Promise<{
        port: number;
    }>;
    stop(): Promise<void>;
}
export { CliServer };
//# sourceMappingURL=server.d.ts.map