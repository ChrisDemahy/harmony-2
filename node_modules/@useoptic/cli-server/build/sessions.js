"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = exports.SessionsManager = void 0;
const cli_config_1 = require("@useoptic/cli-config");
const diffs_1 = require("./diffs");
const on_demand_1 = require("./diffs/on-demand");
const Uuid = __importStar(require("uuid"));
class SessionsManager {
    constructor() {
        this.sessions = [];
    }
    create(path) {
        let id = '' + (this.sessions.length + 1);
        let session = new Session(id, path);
        this.sessions.push(session);
        return session;
    }
    async start(path) {
        let existingSession = this.sessions.find((session) => path && session.path === path);
        let session = existingSession || this.create(path);
        await session.start();
        return session;
    }
    findById(sessionId) {
        return ((sessionId &&
            this.sessions.find((session) => session.id === sessionId)) ||
            undefined);
    }
}
exports.SessionsManager = SessionsManager;
class Session {
    constructor(id, path) {
        this.id = id;
        this.path = path;
        this.diffs = null;
    }
    async start() {
        const resolvedPaths = await cli_config_1.getPathsRelativeToCwd(this.path);
        this.diffs = new SessionDiffs(resolvedPaths.configPath, resolvedPaths.opticIgnorePath, resolvedPaths.capturesPath, resolvedPaths.specStorePath);
    }
    async diffCapture(captureId, events, endpoints) {
        if (!this.diffs)
            throw new Error('Session must have been started before it can diff a capture');
        return this.diffs.startDiff(captureId, events, endpoints);
    }
    diffProgress(diffId) {
        if (!this.diffs)
            throw new Error('Session must have been started before diffs can be accessed');
        return this.diffs.progress(diffId);
    }
    diffQueries(diffId) {
        if (!this.diffs)
            throw new Error('Session must have been started before diffs can be accessed');
        return this.diffs.queries(diffId);
    }
    async stop() { }
}
exports.Session = Session;
class SessionDiffs {
    constructor(configPath, opticIgnorePath, capturesPath, specPath) {
        this.configPath = configPath;
        this.opticIgnorePath = opticIgnorePath;
        this.capturesPath = capturesPath;
        this.specPath = specPath;
        this.diffsById = new Map();
        this.activeDiffsByCaptureId = new Map();
    }
    async startDiff(captureId, events, endpoints) {
        const diffId = Uuid.v4();
        const newDiff = diffs_1.createDiff(on_demand_1.OnDemandDiff, {
            captureId,
            opticIgnorePath: this.opticIgnorePath,
            configPath: this.configPath,
            captureBaseDirectory: this.capturesPath,
            diffId,
            events,
            endpoints,
            specPath: this.specPath,
        });
        this.activeDiffsByCaptureId.set(captureId, newDiff);
        this.diffsById.set(diffId, newDiff);
        newDiff.events.once('finish', () => {
            this.activeDiffsByCaptureId.delete(captureId);
        });
        newDiff.events.once('error', (err) => {
            debugger;
            console.error(err);
            throw err;
        });
        await newDiff.start();
        return diffId;
    }
    progress(diffId) {
        const diff = this.diffsById.get(diffId);
        if (!diff)
            return;
        return diff.progress();
    }
    queries(diffId) {
        const diff = this.diffsById.get(diffId);
        if (!diff)
            return;
        return diff.queries();
    }
}
