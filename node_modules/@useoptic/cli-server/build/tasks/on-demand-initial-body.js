"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnDemandInitialBody = void 0;
const events_1 = require("events");
const cli_scripts_1 = require("@useoptic/cli-scripts");
const fs_extra_1 = __importDefault(require("fs-extra"));
const initial_bodies_worker_1 = require("@useoptic/cli-shared/build/diffs/initial-bodies-worker");
class OnDemandInitialBody {
    constructor(config) {
        this.events = new events_1.EventEmitter();
        this.finished = false;
        this.lastProgress = null;
        this.id = config.method + config.method + config.captureId;
        this.config = config;
    }
    async run() {
        const { config } = this;
        const outputPaths = this.paths();
        const scriptConfig = {
            captureId: config.captureId,
            pathId: config.pathId,
            method: config.method,
            specFilePath: outputPaths.events,
            captureBaseDirectory: config.captureBaseDirectory,
        };
        await fs_extra_1.default.ensureDir(outputPaths.base);
        await Promise.all([fs_extra_1.default.writeJson(outputPaths.events, config.events)]);
        console.log(JSON.stringify(scriptConfig));
        const child = cli_scripts_1.runManagedScriptByName('emit-initial-bodies-commands', JSON.stringify(scriptConfig));
        const onMessage = (x) => {
            if (x.type && x.type === 'progress') {
                if (!x.data.hasMoreInteractions) {
                    this.finished = true;
                    this.events.emit('completed', x.data);
                }
            }
            this.events.emit(x.type, x.data);
        };
        const onError = (err) => {
            cleanup();
            this.events.emit('error', err);
        };
        const onExit = (code, signal) => {
            cleanup();
            if (code !== 0) {
                // @TODO: wonder how we'll ever find out about this happening.
                console.error(`On Demand Body Worker exited with non-zero exit code ${code}`);
            }
            else {
                this.finished = true;
                this.events.emit('finish');
            }
        };
        function cleanup() {
            child.removeListener('message', onMessage);
            child.removeListener('error', onError);
            child.removeListener('exit', onExit);
        }
        child.on('message', onMessage);
        child.once('error', onError);
        child.once('exit', onExit);
        this.child = child;
        const completedPromise = new Promise((resolve) => {
            this.events.once('completed', onCompleted);
            function onCompleted(data) {
                cleanup();
                child.kill();
                resolve(data.results);
            }
            const cleanup = () => {
                this.events.removeListener('completed', onCompleted);
            };
        });
        const startedPromise = await new Promise(async (resolve, reject) => {
            function onErr(err) {
                cleanup();
                reject(err);
            }
            function onProgress(data) {
                cleanup();
                resolve();
            }
            function onFinish() {
                cleanup();
                resolve();
            }
            const cleanup = () => {
                this.events.removeListener('progress', onProgress);
                this.events.removeListener('error', onErr);
                this.events.removeListener('finish', onFinish);
            };
            this.events.once('progress', onProgress);
            this.events.once('error', onErr);
        });
        await startedPromise;
        return await completedPromise;
    }
    paths() {
        return initial_bodies_worker_1.getInitialBodiesOutputPaths(this.config);
    }
    async stop() {
        if (this.child) {
            this.child.kill('SIGTERM');
        }
    }
}
exports.OnDemandInitialBody = OnDemandInitialBody;
