"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const authentication_server_1 = require("../shared/authentication-server");
const querystring_1 = tslib_1.__importDefault(require("querystring"));
const cli_server_1 = require("@useoptic/cli-server");
const paths_1 = require("../shared/paths");
const cli_ux_1 = require("cli-ux");
const config_1 = require("../config");
const onboarding_1 = require("@useoptic/analytics/lib/events/onboarding");
const analytics_1 = require("../shared/analytics");
class Login extends command_1.Command {
    async run() {
        const { flags } = this.parse(Login);
        try {
            const { server, port } = await authentication_server_1.ensureCredentialsServerStarted(6782);
            //also start daemon
            const tokenReceived = new Promise((resolve, reject) => {
                server.events.on(authentication_server_1.tokenReceivedEvent, async (token) => {
                    resolve(token);
                });
            });
            // trackAndSpawn('Starting login', { loginFromUseOptic });
            const queryString = querystring_1.default.stringify({
                tokenUrl: `http://localhost:${port}/api/token`,
            });
            cli_ux_1.cli.action.start('Waiting to be authenticated...');
            let token;
            const fallbackTimeout = setTimeout(() => {
                if (!token) {
                    const launchUrl = `${authentication_server_1.loginBaseUrl}/login`;
                    this.log(`Please log in at ${launchUrl}`);
                    cli_ux_1.cli.open(launchUrl); //reload tab behavior is actually undesirable here
                }
            }, 5000);
            token = await tokenReceived;
            clearTimeout(fallbackTimeout);
            await authentication_server_1.setCredentials({ token });
            const credentials = await authentication_server_1.getCredentials();
            const decodedToken = await authentication_server_1.getUserFromCredentials(credentials);
            cli_ux_1.cli.action.stop('Received Credentials');
            await analytics_1.trackUserEvent(onboarding_1.UserLoggedInFromCLI.withProps({ userId: decodedToken.sub }));
            await server.stop();
            await cli_server_1.ensureDaemonStarted(paths_1.lockFilePath, config_1.Config.apiBaseUrl);
            this.log(`You are now logged in!`);
        }
        catch (e) {
            this.error(e);
        }
    }
}
exports.default = Login;
Login.description = 'Login to Optic from the CLI';
