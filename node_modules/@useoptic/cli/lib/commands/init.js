"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
// @ts-ignore
const cli_config_1 = require("@useoptic/cli-config");
const colors_1 = tslib_1.__importDefault(require("colors"));
const cli_ux_1 = tslib_1.__importDefault(require("cli-ux"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
// @ts-ignore
const cli_shared_1 = require("@useoptic/cli-shared");
const analytics_1 = require("../shared/analytics");
const onboarding_1 = require("@useoptic/analytics/lib/events/onboarding");
const initial_task_1 = require("@useoptic/cli-config/build/helpers/initial-task");
const cli_server_1 = require("@useoptic/cli-server");
const paths_1 = require("../shared/paths");
const config_1 = require("../config");
const cli_client_1 = require("@useoptic/cli-client");
const openBrowser_1 = tslib_1.__importDefault(require("react-dev-utils/openBrowser"));
class Init extends command_1.Command {
    async run() {
        const cwd = process.cwd();
        const { flags } = this.parse(Init);
        if (fs_extra_1.default.existsSync(path_1.default.join(cwd, 'optic.yml')) &&
            Object.entries(flags).length === 0) {
            return this.log(colors_1.default.red(`This directory already has an ${colors_1.default.bold('optic.yml')} file.`));
        }
        const shouldUseThisDirectory = await cli_ux_1.default.confirm(`${colors_1.default.bold.blue(cwd)}\nIs this your API's root directory? (yes/no)`);
        if (!shouldUseThisDirectory) {
            this.log(colors_1.default.red(`Optic must be initialized in your API's root directory. Change your working directory and then run ${colors_1.default.bold('api init')} again`));
            process.exit(1);
        }
        const name = await cli_ux_1.default.prompt('What is this API named?');
        //bring me back with an ID please
        // await trackAndSpawn('New API Created', { name });
        const config = initial_task_1.buildTask(name, flags, flags.inboundUrl && flags.targetUrl ? 'start-proxy' : 'start');
        // const token: string = await Promise.resolve('token-from-backend')
        const { configPath } = await cli_config_1.createFileTree(config, cwd);
        cli_ux_1.default.log(cli_shared_1.fromOptic(`Added Optic configuration to ${colors_1.default.bold(configPath)}`));
        async function startInitFlow() {
            const paths = await cli_config_1.getPathsRelativeToConfig();
            const config = await cli_config_1.readApiConfig(paths.configPath);
            const daemonState = await cli_server_1.ensureDaemonStarted(paths_1.lockFilePath, config_1.Config.apiBaseUrl);
            const apiBaseUrl = `http://localhost:${daemonState.port}/api`;
            cli_shared_1.developerDebugLogger(`api base url: ${apiBaseUrl}`);
            const cliClient = new cli_client_1.Client(apiBaseUrl);
            cliClient.setIdentity(await analytics_1.getUser());
            const cliSession = await cliClient.findSession(paths.cwd, null, null);
            cli_shared_1.developerDebugLogger({ cliSession });
            const uiBaseUrl = cli_shared_1.makeUiBaseUrl(daemonState);
            const uiUrl = `${uiBaseUrl}/apis/${cliSession.session.id}/setup`;
            cli_ux_1.default.log(`Finish setting up your API start task here: ${uiUrl}`);
            openBrowser_1.default(uiUrl);
        }
        await startInitFlow();
        await analytics_1.trackUserEvent(onboarding_1.ApiInitializedInProject.withProps({
            cwd: cwd,
            source: Object.entries(flags).length === 0
                ? 'documentation'
                : 'on-boarding-flow',
            apiName: name,
        }));
        process.exit(0);
    }
}
exports.default = Init;
Init.description = 'Add Optic to your API';
Init.flags = {
    inboundUrl: command_1.flags.string({}),
    targetUrl: command_1.flags.string({}),
    command: command_1.flags.string({}),
};
