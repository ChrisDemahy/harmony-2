"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
// @ts-ignore
const cli_config_1 = require("@useoptic/cli-config");
//@ts-ignore
const nice_try_1 = tslib_1.__importDefault(require("nice-try"));
const cli_ux_1 = require("cli-ux");
//@ts-ignore
const which_1 = tslib_1.__importDefault(require("which"));
const colors_1 = tslib_1.__importDefault(require("colors"));
const cli_shared_1 = require("@useoptic/cli-shared");
const oas_1 = require("./generate/oas");
const spawn_process_1 = require("../shared/spawn-process");
class Scripts extends command_1.Command {
    async run() {
        const { args, flags } = this.parse(Scripts);
        const scriptName = args.scriptName;
        if (!scriptName) {
            return console.log('list all scripts...');
        }
        const script = await nice_try_1.default(async () => {
            var _a;
            const paths = await cli_config_1.getPathsRelativeToConfig();
            const config = await cli_config_1.readApiConfig(paths.configPath);
            const foundScript = (_a = config.scripts) === null || _a === void 0 ? void 0 : _a[scriptName];
            if (foundScript) {
                return normalizeScript(foundScript);
            }
        });
        if (scriptName && script) {
            this.log(cli_shared_1.fromOptic(`Found Script ${colors_1.default.bold(scriptName)}`));
            const { found, missing } = await checkDependencies(script);
            if (missing.length) {
                const hasInstallScript = Boolean(script.install);
                this.log(cli_shared_1.fromOptic(colors_1.default.red(`Some bin dependencies are missing ${JSON.stringify(missing)}. ${hasInstallScript &&
                    !flags.install &&
                    "Run the command again with the flag '--install' to install them"}`)));
                if (hasInstallScript && flags.install) {
                    const result = await tryInstall(script.install);
                    if (!result) {
                        return this.log(cli_shared_1.fromOptic(colors_1.default.red('Install command failed. Please install the dependencies for this script manually')));
                    }
                    else {
                        return this.executeScript(script);
                    }
                }
                return;
            }
            else {
                return this.executeScript(script);
            }
        }
        else {
            this.log(cli_shared_1.fromOptic(colors_1.default.red(`No script ${scriptName} found in optic.yml`)));
        }
    }
    async executeScript(script) {
        const paths = await oas_1.generateOas(true, true);
        const env = {
            //@ts-ignore
            OPENAPI_JSON: paths.json,
            //@ts-ignore
            OPENAPI_YAML: paths.yaml,
        };
        console.log(`Running command: ${colors_1.default.grey(script.command)} `);
        await spawn_process_1.spawnProcess(script.command, env);
    }
}
exports.default = Scripts;
Scripts.description = 'Run one of the scripts in your optic.yml file';
Scripts.args = [
    {
        name: 'scriptName',
        required: false,
    },
];
Scripts.flags = {
    install: command_1.flags.boolean({
        required: false,
        char: 'i',
    }),
};
function normalizeScript(scriptRaw) {
    if (typeof scriptRaw === 'string') {
        return {
            command: scriptRaw,
            dependsOn: [],
        };
    }
    else {
        const dependsOn = (scriptRaw.dependsOn && typeof scriptRaw.dependsOn === 'string'
            ? [scriptRaw.dependsOn]
            : scriptRaw.dependsOn) || [];
        return Object.assign(Object.assign({}, scriptRaw), { dependsOn });
    }
}
async function checkDependencies(script) {
    const dependencies = script.dependsOn;
    cli_ux_1.cli.action.start(`${colors_1.default.bold(`Checking bin dependencies`)} ${colors_1.default.grey('Requiring ' + JSON.stringify(dependencies))}`);
    const results = [];
    for (const bin of dependencies) {
        const pathToBin = which_1.default.sync(bin, { nothrow: true });
        results.push([bin, pathToBin]);
    }
    const found = results.filter((i) => Boolean(i[1])).map((i) => i[0]);
    const missing = results.filter((i) => !Boolean(i[1])).map((i) => i[0]);
    if (missing.length === 0) {
        cli_ux_1.cli.action.stop(colors_1.default.green.bold('âœ“ All dependencies found'));
    }
    else {
        cli_ux_1.cli.action.stop(colors_1.default.red('Missing dependencies'));
    }
    return { found, missing };
}
async function tryInstall(installScript) {
    cli_ux_1.cli.action.start(`Running install command: ${colors_1.default.grey(installScript)} `);
    const status = await spawn_process_1.spawnProcess(installScript);
    cli_ux_1.cli.action.stop('Success!');
    return status;
}
