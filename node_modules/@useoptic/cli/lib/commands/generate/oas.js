"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.emit = exports.generateOas = void 0;
const tslib_1 = require("tslib");
const command_1 = tslib_1.__importStar(require("@oclif/command"));
const cli_config_1 = require("@useoptic/cli-config");
const domain_1 = require("@useoptic/domain");
const cli_ux_1 = require("cli-ux");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = tslib_1.__importDefault(require("path"));
const js_yaml_1 = tslib_1.__importDefault(require("js-yaml"));
const cli_shared_1 = require("@useoptic/cli-shared");
class GenerateOas extends command_1.default {
    async run() {
        const { flags } = this.parse(GenerateOas);
        await generateOas(flags.yaml || (!flags.json && !flags.yaml) /* make this default */, flags.json);
    }
}
exports.default = GenerateOas;
GenerateOas.description = 'export an OpenAPI 3.0.1 spec';
GenerateOas.flags = {
    json: command_1.flags.boolean({}),
    yaml: command_1.flags.boolean({}),
};
async function generateOas(flagYaml, flagJson) {
    try {
        const paths = await cli_config_1.getPathsRelativeToConfig();
        const { specStorePath } = paths;
        try {
            const eventsBuffer = await fs_extra_1.default.readFile(specStorePath);
            const eventsString = eventsBuffer.toString();
            cli_ux_1.cli.action.start('Generating OAS file');
            const parsedOas = domain_1.OasProjectionHelper.fromEventString(eventsString);
            const outputFiles = await emit(paths, parsedOas, flagYaml, flagJson);
            const filePaths = Object.values(outputFiles);
            cli_ux_1.cli.action.stop('\n' +
                cli_shared_1.fromOptic(`Generated OAS file${filePaths.length > 1 && 's'} \n` +
                    filePaths.join('\n')));
            return outputFiles;
        }
        catch (e) {
            console.error(e);
        }
    }
    catch (e) {
        console.error(e);
    }
}
exports.generateOas = generateOas;
async function emit(paths, parsedOas, flagYaml, flagJson) {
    const shouldOutputYaml = flagYaml;
    const shouldOutputJson = flagJson;
    const outputPath = path_1.default.join(paths.basePath, 'generated');
    let yamlPath, jsonPath;
    await fs_extra_1.default.ensureDir(outputPath);
    if (shouldOutputYaml) {
        const outputFile = path_1.default.join(outputPath, 'openapi.yaml');
        await fs_extra_1.default.writeFile(outputFile, js_yaml_1.default.safeDump(parsedOas, { indent: 1 }));
        yamlPath = outputFile;
    }
    if (shouldOutputJson) {
        const outputFile = path_1.default.join(outputPath, 'openapi.json');
        await fs_extra_1.default.writeJson(outputFile, parsedOas, { spaces: 2 });
        jsonPath = outputFile;
    }
    return {
        json: jsonPath,
        yaml: yamlPath,
    };
}
exports.emit = emit;
