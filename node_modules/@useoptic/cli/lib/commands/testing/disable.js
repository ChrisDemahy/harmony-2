"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = tslib_1.__importDefault(require("@oclif/command"));
const slugify_1 = tslib_1.__importDefault(require("slugify"));
const colors_1 = tslib_1.__importDefault(require("colors"));
const cli_shared_1 = require("@useoptic/cli-shared");
const cli_ux_1 = tslib_1.__importDefault(require("cli-ux"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const config_1 = tslib_1.__importDefault(require("../../config"));
class Disable extends command_1.default {
    async run() {
        const loadingConfig = cli_shared_1.loadPathsAndConfig(this);
        cli_shared_1.promiseFromOptic(loadingConfig, 'Loading your optic.yml');
        const { paths, config } = await loadingConfig;
        if (!fs_extra_1.default.existsSync(paths.testingConfigPath)) {
            return this.log(cli_shared_1.fromOptic('Testing was not enabled for this API. Nothing to disable.'));
        }
        this.log(cli_shared_1.warningFromOptic(`WARNING: Destructive action
This command will revoke access from all your testing history. Re-enabling through testing:enable will ${colors_1.default.bold('not')} restore access.`));
        const expectedConfirmation = slugify_1.default(config.name || 'i understand please continue').toLowerCase();
        const confirm = await cli_ux_1.default.prompt(cli_shared_1.fromOptic(`To proceed, type ${colors_1.default.bold.red(expectedConfirmation)}`));
        if (confirm !== expectedConfirmation) {
            return this.log(cli_shared_1.errorFromOptic(`Confirmation did not match ${colors_1.default.bold.red(expectedConfirmation)}. Aborted.`));
        }
        fs_extra_1.default.unlinkSync(paths.testingConfigPath);
        this.log(cli_shared_1.fromOptic('Live Contract Testing has successfully been disabled.'));
    }
}
exports.default = Disable;
Disable.description = 'Disable Live Contracting Testing for your API';
Disable.hidden = config_1.default.hiddenFeatures.includes('testing');
