"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = tslib_1.__importDefault(require("@oclif/command"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const cli_shared_1 = require("@useoptic/cli-shared");
const config_1 = require("../../config");
class Enable extends command_1.default {
    async run() {
        const loadingConfig = cli_shared_1.loadPathsAndConfig(this);
        cli_shared_1.promiseFromOptic(loadingConfig, 'Loading your optic.yml');
        const { paths, config } = await loadingConfig;
        if (fs_extra_1.default.existsSync(paths.testingConfigPath)) {
            return this.log(cli_shared_1.fromOptic('Testing is already enabled for this API. To re-enable, use testing:disable command first.'));
        }
        const saasClient = new cli_shared_1.SaasClient(config_1.Config.apiBaseUrl);
        cli_shared_1.developerDebugLogger('fetching auth token');
        const gettingApiToken = saasClient.getApiAuthToken(config.name || 'Unknown API');
        cli_shared_1.promiseFromOptic(gettingApiToken, 'Creating Testing credentials for API');
        const authToken = await gettingApiToken;
        const testingConfig = { authToken };
        const savingToken = (async () => {
            await fs_extra_1.default.ensureFile(paths.testingConfigPath);
            await fs_extra_1.default.writeJson(paths.testingConfigPath, testingConfig);
        })();
        cli_shared_1.promiseFromOptic(savingToken, 'Saving Testing credentials locally');
        await savingToken;
        this.log(cli_shared_1.fromOptic('Live Contract Testing has successfully been enabled.'));
    }
}
exports.default = Enable;
Enable.description = 'Enable Live Contracting Testing for your API';
Enable.hidden = config_1.Config.hiddenFeatures.includes('testing');
