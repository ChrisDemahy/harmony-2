"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyTask = void 0;
const tslib_1 = require("tslib");
const colors_1 = tslib_1.__importDefault(require("colors"));
//@ts-ignore
const nice_try_1 = tslib_1.__importDefault(require("nice-try"));
const cli_config_1 = require("@useoptic/cli-config");
const analytics_1 = require("../analytics");
const onboarding_1 = require("@useoptic/analytics/lib/events/onboarding");
const cli_shared_1 = require("@useoptic/cli-shared");
const recommended_1 = require("./recommended");
const manual_1 = require("./manual");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const build_1 = require("@useoptic/cli-config/build");
async function verifyTask(cli, taskName, dependent = false) {
    const config = await nice_try_1.default(async () => {
        const paths = await cli_config_1.getPathsRelativeToConfig();
        return await cli_config_1.readApiConfig(paths.configPath);
    });
    if (!config) {
        cli.log(cli_shared_1.fromOptic(colors_1.default.red(`Please run this command from an Optic project`)));
        return false;
    }
    const paths = await cli_config_1.getPathsRelativeToConfig();
    const rawConfig = (await fs_extra_1.default.readFile(paths.configPath)).toString();
    let foundTask = null;
    await nice_try_1.default(async () => {
        if (config.tasks) {
            const task = config.tasks[taskName];
            foundTask = task;
        }
    });
    const taskExists = Boolean(foundTask);
    if (!taskExists) {
        cli.log(cli_shared_1.fromOptic(colors_1.default.red(`No task provided. Please run ${colors_1.default.bold('api check <taskName>')} with one of these tasks:`)));
        cli.log(Object.keys(config.tasks || [])
            .map((i) => '- ' + i)
            .sort()
            .join('\n'));
        return false;
    }
    if (taskExists && foundTask) {
        const mode = (() => {
            if (cli_config_1.isTestTask(foundTask)) {
                return build_1.Modes.Test;
            }
            if (cli_config_1.isManualTask(foundTask)) {
                return build_1.Modes.Manual;
            }
            if (cli_config_1.isRecommendedTask(foundTask)) {
                return build_1.Modes.Recommended;
            }
            return null;
        })();
        cli.log('\n' +
            cli_shared_1.fromOptic(colors_1.default.underline(`Checking task ${colors_1.default.bold(taskName)}`)));
        if (mode === null) {
            cli.log(cli_shared_1.fromOptic(colors_1.default.red(`Invalid task configuration. `)));
            return false;
        }
        let passedAll = false;
        if (mode === build_1.Modes.Test) {
            if (dependent) {
                passedAll = false;
                cli.log(cli_shared_1.fromOptic(colors_1.default.red(`Test tasks can not depend on other test tasks. ${colors_1.default.bold(foundTask.useTask)} cannot be used here.`)));
            }
            else {
                cli.log(cli_shared_1.fromOptic(colors_1.default.green(`This is a test task, checking dependent task ${colors_1.default.bold(foundTask.useTask)}`)));
                passedAll = await verifyTask(cli, foundTask.useTask, true);
            }
        }
        if (mode == build_1.Modes.Recommended) {
            const startConfig = await cli_config_1.TaskToStartConfig(foundTask);
            const results = await recommended_1.verifyRecommended(foundTask, startConfig);
            passedAll = results.passedAll;
            await analytics_1.trackUserEvent(onboarding_1.ApiCheckCompleted.withProps({
                passed: passedAll,
                mode: mode,
                taskName: taskName,
                rawConfig,
                task: Object.assign({}, foundTask),
                recommended: {
                    commandIsLongRunning: results.assertions.longRunningAssertion,
                    apiProcessStartsOnAssignedHost: results.assertions.startOnHostAssertion,
                    apiProcessStartsOnAssignedPort: results.assertions.startOnPortAssertion,
                    proxyCanStartAtInboundUrl: results.assertions.proxyCanStartAtInboundUrl,
                },
            }));
        }
        if (mode == build_1.Modes.Manual) {
            const startConfig = await cli_config_1.TaskToStartConfig(foundTask);
            const results = await manual_1.verifyManual(foundTask, startConfig);
            passedAll = results.passedAll;
            await analytics_1.trackUserEvent(onboarding_1.ApiCheckCompleted.withProps({
                passed: passedAll,
                mode: mode,
                taskName: taskName,
                rawConfig,
                task: Object.assign({}, foundTask),
                manual: {
                    proxyCanStartAtInboundUrl: results.assertions.proxyCanStartAtInboundUrl,
                    proxyTargetUrlResolves: results.assertions.isTargetResolvable,
                },
            }));
        }
        if (!dependent) {
            if (passedAll) {
                cli.log('\n' +
                    cli_shared_1.fromOptic(colors_1.default.green.bold(`All Passed! This task is setup properly. Nice work!`)));
            }
            else {
                cli.log('\n' +
                    cli_shared_1.fromOptic(colors_1.default.red.bold(`Some checks failed. Steps to fix can be found here: useoptic.com/docs/check-fail`)));
                // console.log(results);
            }
        }
        return passedAll;
    }
    return false;
}
exports.verifyTask = verifyTask;
