"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalCliTaskRunner = exports.LocalTaskSessionWrapper = exports.runCommandFlags = void 0;
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const cli_server_1 = require("@useoptic/cli-server");
const path_1 = tslib_1.__importDefault(require("path"));
const colors_1 = tslib_1.__importDefault(require("colors"));
const cli_config_1 = require("@useoptic/cli-config");
const analytics_1 = require("./analytics");
const paths_1 = require("./paths");
const cli_client_1 = require("@useoptic/cli-client");
const find_process_1 = tslib_1.__importDefault(require("find-process"));
const strip_ansi_1 = tslib_1.__importDefault(require("strip-ansi"));
const tasks_1 = require("@useoptic/analytics/lib/events/tasks");
const authentication_server_1 = require("./authentication-server");
const cli_scripts_1 = require("@useoptic/cli-scripts");
const cli_shared_1 = require("@useoptic/cli-shared");
const uuid = tslib_1.__importStar(require("uuid"));
const tasks_2 = require("@useoptic/cli-shared/build/tasks");
const capture_saver_with_diffs_1 = require("@useoptic/cli-shared/build/captures/avro/file-system/capture-saver-with-diffs");
const events_1 = require("events");
const config_1 = require("../config");
const coverage_1 = require("./coverage");
const spawn_process_1 = require("./spawn-process");
exports.runCommandFlags = {
    'collect-coverage': command_1.flags.boolean({
        char: 'c',
        default: false,
        required: false,
    }),
};
async function LocalTaskSessionWrapper(cli, taskName, flags) {
    // hijack the config deprecation log to format nicely for the CLI
    cli_config_1.deprecationLogger.log = (msg) => {
        cli.log(cli_shared_1.warningFromOptic('optic.yml deprecation: ' +
            strip_ansi_1.default(msg).replace(cli_config_1.deprecationLogger.namespace, '').trim()));
    };
    cli_config_1.deprecationLogger.enabled = true;
    const { paths, config } = await cli_shared_1.loadPathsAndConfig(cli);
    const captureId = uuid.v4();
    const runner = new LocalCliTaskRunner(captureId, paths);
    const session = new tasks_2.CliTaskSession(runner);
    const task = config.tasks[taskName];
    if (!task) {
        cli.log(cli_shared_1.fromOptic(`Task ${colors_1.default.grey.bold(taskName)} does not exist. Try one of these ${colors_1.default.grey.bold('api run <taskname>')}`));
        return cli.log(Object.keys(config.tasks || [])
            .map((i) => '- ' + i)
            .sort()
            .join('\n'));
    }
    if (task && cli_config_1.isTestTask(task)) {
        cli.log(cli_shared_1.fromOptic(`Running dependent task ${colors_1.default.grey.bold(task.useTask)}...`));
        await session.start(cli, config, task.useTask, task.command);
    }
    else {
        await session.start(cli, config, taskName);
    }
    if (flags['collect-coverage']) {
        await coverage_1.printCoverage(paths, taskName, captureId);
    }
    return await cli_shared_1.cleanupAndExit();
}
exports.LocalTaskSessionWrapper = LocalTaskSessionWrapper;
class LocalCliTaskRunner {
    constructor(captureId, paths) {
        this.captureId = captureId;
        this.paths = paths;
    }
    async run(cli, config, taskConfig, commandToRunWhenStarted) {
        ////////////////////////////////////////////////////////////////////////////////
        await analytics_1.trackUserEvent(tasks_1.StartedTaskWithLocalCli.withProps({
            inputs: analytics_1.opticTaskToProps('', taskConfig),
            cwd: this.paths.cwd,
            captureId: this.captureId,
        }));
        ////////////////////////////////////////////////////////////////////////////////
        const blockers = await find_process_1.default('port', taskConfig.proxyConfig.port);
        if (blockers.length > 0) {
            throw new cli_config_1.TargetPortUnavailableError(`Optic could not start its proxy server on port ${taskConfig.proxyConfig.port}.
There is something else running:
${blockers.map((x) => `[pid ${x.pid}]: ${x.cmd}`).join('\n')}
`);
        }
        ////////////////////////////////////////////////////////////////////////////////
        const daemonState = await cli_server_1.ensureDaemonStarted(paths_1.lockFilePath, config_1.Config.apiBaseUrl);
        const apiBaseUrl = `http://localhost:${daemonState.port}/api`;
        cli_shared_1.developerDebugLogger(`api base url: ${apiBaseUrl}`);
        const cliClient = new cli_client_1.Client(apiBaseUrl);
        ////////////////////////////////////////////////////////////////////////////////
        cli_shared_1.developerDebugLogger('checking credentials');
        const credentials = await authentication_server_1.getCredentials();
        if (credentials) {
            const user = await authentication_server_1.getUserFromCredentials(credentials);
            await cliClient.setIdentity(user);
        }
        ////////////////////////////////////////////////////////////////////////////////
        cli_shared_1.developerDebugLogger('finding matching daemon session');
        const { cwd } = this.paths;
        const cliSession = await cliClient.findSession(cwd, taskConfig, this.captureId);
        cli_shared_1.developerDebugLogger({ cliSession });
        ////////////////////////////////////////////////////////////////////////////////
        const uiBaseUrl = cli_shared_1.makeUiBaseUrl(daemonState);
        const uiUrl = `${uiBaseUrl}/apis/${cliSession.session.id}/diffs`;
        cli.log(cli_shared_1.fromOptic(`Review the API Diff at ${uiUrl}`));
        ////////////////////////////////////////////////////////////////////////////////
        const { capturesPath } = this.paths;
        const captureId = this.captureId;
        const eventEmitter = new events_1.EventEmitter();
        const specServiceClient = new cli_client_1.SpecServiceClient(cliSession.session.id, eventEmitter, apiBaseUrl);
        const persistenceManager = new capture_saver_with_diffs_1.CaptureSaverWithDiffs({
            captureBaseDirectory: capturesPath,
            captureId,
        }, config, specServiceClient);
        ////////////////////////////////////////////////////////////////////////////////
        process.env.OPTIC_ENABLE_CAPTURE_BODY = 'yes';
        const testCommand = commandToRunWhenStarted
            ? async () => {
                console.log(cli_shared_1.fromOptic('Running test command ' +
                    colors_1.default.grey.bold(commandToRunWhenStarted)));
                await spawn_process_1.spawnProcess(commandToRunWhenStarted, {
                    OPTIC_PROXY_PORT: taskConfig.proxyConfig.port.toString(),
                    OPTIC_PROXY_HOST: taskConfig.proxyConfig.host.toString(),
                    OPTIC_PROXY: `http://${taskConfig.proxyConfig.host.toString()}:${taskConfig.proxyConfig.port.toString()}`,
                });
                // return new Promise((resolve) => setTimeout(resolve, 500)); // needs time to finish saving
            }
            : undefined;
        const sessionManager = new cli_shared_1.CommandAndProxySessionManager(taskConfig, testCommand);
        await sessionManager.run(persistenceManager);
        ////////////////////////////////////////////////////////////////////////////////
        await cliClient.markCaptureAsCompleted(cliSession.session.id, captureId);
        const summary = await specServiceClient.getCaptureStatus(captureId);
        const sampleCount = summary.interactionsCount;
        const hasDiff = summary.diffsCount > 0;
        await analytics_1.trackUserEvent(tasks_1.ExitedTaskWithLocalCli.withProps({
            interactionCount: sampleCount,
            inputs: analytics_1.opticTaskToProps('', taskConfig),
            captureId: this.captureId,
        }));
        if (hasDiff) {
            const uiUrl = `${uiBaseUrl}/apis/${cliSession.session.id}/diffs/${captureId}`;
            const iconPath = path_1.default.join(__dirname, '../../assets/optic-logo-png.png');
            cli_scripts_1.runScriptByName('notify', uiUrl, iconPath);
            cli.log(cli_shared_1.fromOptic(`Observed Unexpected API Behavior. Click here to review: ${uiUrl}`));
        }
        else {
            if (sampleCount > 0) {
                cli.log(cli_shared_1.fromOptic(`No API Diff Observed for ${sampleCount} interactions`));
            }
        }
    }
}
exports.LocalCliTaskRunner = LocalCliTaskRunner;
