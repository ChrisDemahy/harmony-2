"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isEnvFalse = exports.isEnvTrue = exports.create = exports.Env = void 0;
const semver_1 = __importDefault(require("semver"));
var Env;
(function (Env) {
    Env["Development"] = "development";
    Env["Staging"] = "staging";
    Env["Testing"] = "testing";
    Env["Production"] = "production";
})(Env = exports.Env || (exports.Env = {}));
function create(pkg, env) {
    const name = pkg.name;
    /* istanbul ignore next */
    if (!name) {
        throw new Error('Could not create cli config object: package.json must have a name');
    }
    const version = semver_1.default.valid(pkg.version);
    /* istanbul ignore next */
    if (!version) {
        throw new Error(`Could not create cli config object for ${name}: version in package.json not valid semver`);
    }
    const prereleaseComponents = semver_1.default.prerelease(version);
    const prereleaseTag = prereleaseComponents &&
        prereleaseComponents.find((component) => typeof component === 'string');
    const isPrerelease = !!prereleaseComponents;
    const channel = isPrerelease ? prereleaseTag || 'prerelease' : 'latest';
    const envName = isEnvTrue(env.OPTIC_DEVELOPMENT)
        ? Env.Development
        : Env.Production;
    return {
        name,
        version,
        channel,
        prerelease: isPrerelease,
        envName,
        env: {
            development: envName === Env.Development,
            production: envName === Env.Production,
        },
    };
}
exports.create = create;
function isEnvTrue(val) {
    return val === 'yes' || val === 'true';
}
exports.isEnvTrue = isEnvTrue;
function isEnvFalse(val) {
    return val === 'no' || val === 'false';
}
exports.isEnvFalse = isEnvFalse;
