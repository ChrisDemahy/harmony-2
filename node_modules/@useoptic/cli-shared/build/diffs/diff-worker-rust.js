"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiffWorkerRust = exports.getDiffOutputPaths = void 0;
const cli_config_1 = require("@useoptic/cli-config");
const diff_engine_1 = require("@useoptic/diff-engine");
const interaction_iterator_1 = require("../captures/avro/file-system/interaction-iterator");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const stream_chain_1 = __importStar(require("stream-chain"));
const stream_fork_1 = require("stream-fork");
const stream_1 = require("stream");
const Stringer_1 = require("stream-json/jsonl/Stringer");
const events_1 = require("events");
function getDiffOutputPaths(values) {
    const { captureBaseDirectory, captureId, diffId } = values;
    const base = path_1.default.join(captureBaseDirectory, captureId, 'diffs', diffId);
    const diffs = path_1.default.join(base, 'diffs.json');
    const diffsStream = path_1.default.join(base, 'diffs.jsonl');
    const stats = path_1.default.join(base, 'stats.json');
    const undocumentedUrls = path_1.default.join(base, 'undocumentedUrls.json');
    const events = path_1.default.join(base, 'events.json');
    const ignoreRequests = path_1.default.join(base, 'ignoreRequests.json');
    const filters = path_1.default.join(base, 'filters.json');
    const additionalCommands = path_1.default.join(base, 'additionalCommands.json');
    return {
        base,
        diffs,
        diffsStream,
        stats,
        undocumentedUrls,
        events,
        ignoreRequests,
        filters,
        additionalCommands,
    };
}
exports.getDiffOutputPaths = getDiffOutputPaths;
class DiffWorkerRust {
    constructor(config) {
        this.config = config;
        this.hasMoreInteractions = true;
        this.diffedInteractionsCounter = BigInt(0);
        this.skippedInteractionsCounter = BigInt(0);
        this.finished = false;
        this.ended = false;
        this.events = new events_1.EventEmitter();
    }
    async start() {
        console.log('running');
        console.time('load inputs');
        const [ignoreRequests, filters] = await Promise.all([
            fs_extra_1.default.readJson(this.config.ignoreRequestsFilePath),
            fs_extra_1.default.readJson(this.config.filtersFilePath),
        ]);
        console.timeEnd('load inputs');
        const ignoredRequests = cli_config_1.parseIgnore(ignoreRequests);
        function filterIgnoredRequests(interaction) {
            return !ignoredRequests.shouldIgnore(interaction.request.method, interaction.request.path);
        }
        // TODO: re-enable or reconsider filtering by endpoints, disabled now as we're
        // trying to not read the spec with Scala
        const interactionFilter = filterIgnoredRequests;
        const interactionIterator = interaction_iterator_1.CaptureInteractionIterator({
            captureId: this.config.captureId,
            captureBaseDirectory: this.config.captureBaseDirectory,
        }, interactionFilter);
        const diffOutputPaths = getDiffOutputPaths(this.config);
        const interactionPointerConverter = new interaction_iterator_1.LocalCaptureInteractionPointerConverter({
            captureBaseDirectory: this.config.captureBaseDirectory,
            captureId: this.config.captureId,
        });
        await fs_extra_1.default.ensureDir(diffOutputPaths.base);
        // setup streams
        const interactionsStream = stream_chain_1.chain([
            stream_1.Readable.from(interactionIterator, {
                objectMode: true,
            }),
            (item) => {
                this.skippedInteractionsCounter = item.skippedInteractionsCounter;
                this.diffedInteractionsCounter = item.diffedInteractionsCounter;
                this.hasMoreInteractions = item.hasMoreInteractions;
                if (!item.hasMoreInteractions || this.ended) {
                    return stream_chain_1.default.final();
                }
                if (!item.interaction)
                    return;
                const { batchId, index } = item.interaction.context;
                let interactionPointer = interactionPointerConverter.toPointer(item.interaction.value, {
                    interactionIndex: index,
                    batchId,
                });
                return [[item.interaction.value, [interactionPointer]]];
            },
            Stringer_1.stringer(),
        ]);
        const diffsSink = fs_extra_1.default.createWriteStream(diffOutputPaths.diffsStream);
        diffsSink.once('finish', () => {
            this.finish();
        });
        diffsSink.once('error', (err) => {
            this.destroy(err);
        });
        const diffEngine = diff_engine_1.spawn({ specPath: diffOutputPaths.events });
        diffEngine.result.catch((err) => {
            this.destroy(err);
        });
        const diffEngineLog = fs_extra_1.default.createWriteStream(path_1.default.join(diffOutputPaths.base, 'diff-engine-output.log'));
        let processStreams = [diffEngine.input];
        if (process.env.OPTIC_DEVELOPMENT === 'yes') {
            processStreams.push(fs_extra_1.default.createWriteStream(path_1.default.join(diffOutputPaths.base, 'interactions.jsonl')));
        }
        // connect it all together to form a pipeline
        interactionsStream.pipe(stream_fork_1.fork(processStreams));
        diffEngine.output.pipe(diffsSink);
        diffEngine.error.pipe(diffEngineLog);
    }
    destroy(err) {
        if (this.ended)
            return;
        this.ended = true;
        if (err) {
            this.events.emit('error', err);
        }
        this.events.emit('end');
    }
    finish() {
        if (this.ended || this.finished)
            return;
        this.finished = true;
        this.ended = true;
        this.hasMoreInteractions = false;
        this.events.emit('finish');
    }
    progress() {
        return __asyncGenerator(this, arguments, function* progress_1() {
            const report = () => ({
                diffedInteractionsCounter: this.diffedInteractionsCounter.toString(),
                skippedInteractionsCounter: this.skippedInteractionsCounter.toString(),
                // this seems weird, but is right: downstream doesn't care whether we're doing reading interactions
                // it cares whether we're done diffing
                hasMoreInteractions: !this.finished,
            });
            yield yield __await(report());
            // Progress reporting
            while (!this.ended) {
                yield yield __await(yield __await(new Promise((resolve) => {
                    const events = this.events;
                    events.once('end', onEnd);
                    let timeout = setTimeout(onTimeout, 1000);
                    function onEnd() {
                        cleanup();
                        resolve(report());
                    }
                    function onTimeout() {
                        cleanup();
                        resolve(report());
                    }
                    function cleanup() {
                        events.removeListener('end', onEnd);
                        clearTimeout(timeout);
                    }
                })));
            }
        });
    }
}
exports.DiffWorkerRust = DiffWorkerRust;
