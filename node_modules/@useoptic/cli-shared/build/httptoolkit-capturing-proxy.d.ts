/// <reference types="node" />
import { EventEmitter } from 'events';
import * as mockttp from 'mockttp';
import { CompletedRequest } from 'mockttp';
import { IArbitraryData, IBody } from '@useoptic/domain-types';
import { IQueryParser } from './query/query-parser-interfaces';
export interface IHttpToolkitCapturingProxyConfig {
    proxyTarget?: string;
    proxyPort: number;
    host: string;
    flags: {
        includeJsonBody: boolean;
        includeTextBody: boolean;
        includeShapeHash: boolean;
        includeQueryString: boolean;
    };
    queryParser: IQueryParser;
}
export interface IRequestFilter {
    shouldSkip(request: CompletedRequest): boolean;
}
export declare const opticStatusPath = "/__optic_status";
export declare class HttpToolkitCapturingProxy {
    private proxy;
    private requests;
    private config;
    readonly events: EventEmitter;
    start(config: IHttpToolkitCapturingProxyConfig): Promise<void>;
    extractQueryParameters(req: mockttp.CompletedRequest): IArbitraryData;
    extractBody(req: mockttp.CompletedRequest | mockttp.CompletedResponse): IBody;
    stop(): Promise<void>;
}
//# sourceMappingURL=httptoolkit-capturing-proxy.d.ts.map