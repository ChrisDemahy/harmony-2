"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const client_utilities_1 = require("@useoptic/client-utilities");
const index_1 = require("./index");
class Client {
    constructor(baseUrl, authToken) {
        this.baseUrl = baseUrl;
        this.authToken = authToken;
        this.defaultAdditionalHeaders = {};
    }
    defaultHeaders({ auth = true } = {}) {
        const headers = Object.assign({}, this.defaultAdditionalHeaders);
        if (auth) {
            headers.Authorization = `Bearer ${this.authToken}`;
        }
        return headers;
    }
    setAuthToken(token) {
        this.authToken = token;
    }
    async getApiAuthToken(apiName) {
        const url = `${this.baseUrl}/registrations`;
        const body = {
            apiName,
        };
        const response = await client_utilities_1.JsonHttpClient.postJson(url, body);
        return response.token;
    }
    async getSpecUploadUrl() {
        const url = `${this.baseUrl}/spec-uploads`;
        return client_utilities_1.JsonHttpClient.postJsonWithoutBody(url, this.defaultHeaders());
    }
    async getInteractionsUploadUrl(agentId, batchId) {
        const url = `${this.baseUrl}/interaction-uploads`;
        return client_utilities_1.JsonHttpClient.postJson(url, { agentId, batchId }, this.defaultHeaders());
    }
    uploadInteractions(uploadUrl, bytes) {
        index_1.developerDebugLogger(`uploading batch to ${uploadUrl}`);
        return client_utilities_1.JsonHttpClient.putBytes(uploadUrl, bytes, {
            'Content-Type': 'avro/optic-interactions-v1+binary',
            'x-amz-server-side-encryption': 'AES256',
        });
    }
    uploadSpec(uploadUrl, spec) {
        index_1.developerDebugLogger(`uploading spec to ${uploadUrl}`);
        const bytes = Buffer.from(JSON.stringify(spec));
        return client_utilities_1.JsonHttpClient.putBytes(uploadUrl, bytes, {
            'Content-Type': 'application/json',
            'x-amz-server-side-encryption': 'AES256',
        });
    }
    startCapture(body) {
        const url = `${this.baseUrl}/captures`;
        return client_utilities_1.JsonHttpClient.postJson(url, body, this.defaultHeaders());
    }
}
exports.Client = Client;
