"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandSession = void 0;
const child_process_1 = require("child_process");
const events_1 = require("events");
const tree_kill_1 = __importDefault(require("tree-kill"));
const index_1 = require("./index");
class CommandSession {
    constructor() {
        this.isRunning = false;
        this.events = new events_1.EventEmitter();
    }
    start(config, silent = false) {
        const taskOptions = {
            env: Object.assign(Object.assign({}, process.env), config.environmentVariables),
            shell: true,
            cwd: process.cwd(),
            stdio: silent ? 'ignore' : 'inherit',
        };
        this.isRunning = true;
        this.child = child_process_1.spawn(config.command, taskOptions);
        this.events.once('stopped', (e) => {
            this.isRunning = false;
        });
        this.child.on('exit', (code, signal) => {
            index_1.developerDebugLogger(`command process exited with code ${code} and signal ${signal}`);
            this.events.emit('stopped', { state: code ? 'failed' : 'completed' });
        });
        return this.child;
    }
    stop() {
        if (this.isRunning && this.child) {
            const pid = this.child.pid;
            return new Promise((resolve) => {
                tree_kill_1.default(pid, (e) => {
                    if (e) {
                        console.error(e);
                        return resolve();
                    }
                    this.events.emit('stopped', { state: 'terminated' });
                    resolve();
                });
            });
        }
    }
}
exports.CommandSession = CommandSession;
