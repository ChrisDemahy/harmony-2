"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpToolkitCapturingProxy = exports.opticStatusPath = void 0;
const events_1 = require("events");
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const mockttp = __importStar(require("mockttp"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const whatwg_mimetype_1 = __importDefault(require("whatwg-mimetype"));
//@ts-ignore
const shape_hash_1 = require("shape-hash");
const index_1 = require("./index");
const url_1 = __importDefault(require("url"));
class HttpToolkitRequestFilter {
    constructor(self, target) {
        this.self = self;
        this.target = target;
    }
    shouldSkip(request) {
        if (this.target) {
            if (request.path === exports.opticStatusPath) {
                return true;
            }
            if (request.hostname === this.self || request.url.startsWith(this.self)) {
                return false;
            }
            return (request.hostname === this.target || request.url.startsWith(this.target));
        }
        return false;
    }
}
exports.opticStatusPath = '/__optic_status';
class HttpToolkitCapturingProxy {
    constructor() {
        this.requests = new Map();
        this.events = new events_1.EventEmitter();
    }
    async start(config) {
        this.config = config;
        const tempBasePath = path_1.default.join(os_1.default.tmpdir(), 'optic-');
        const configPath = await fs_extra_1.default.mkdtemp(tempBasePath);
        const keyBitLength = 2048;
        const certificateInfo = await mockttp.generateCACertificate({
            bits: keyBitLength,
            commonName: 'Optic Labs Corp',
        });
        const certificatePath = path_1.default.join(configPath, '.optic', 'certificates');
        await fs_extra_1.default.ensureDir(certificatePath);
        const certPath = path_1.default.join(certificatePath, 'ca.cert');
        const keyPath = path_1.default.join(certificatePath, 'ca.key');
        await fs_extra_1.default.writeFile(certPath, certificateInfo.cert);
        await fs_extra_1.default.writeFile(keyPath, certificateInfo.key);
        const https = {
            certPath,
            keyPath,
            keyLength: keyBitLength,
        };
        const proxy = mockttp.getLocal({
            cors: false,
            debug: false,
            https,
            recordTraffic: false,
        });
        this.proxy = proxy;
        const rules = [];
        if (config.proxyTarget) {
            index_1.developerDebugLogger(`forwarding requests to ${config.proxyTarget}`);
            rules.push({
                matchers: [new mockttp.matchers.WildcardMatcher()],
                handler: new mockttp.handlers.PassThroughHandler({
                    forwarding: {
                        targetHost: config.proxyTarget,
                        updateHostHeader: true,
                    },
                }),
            });
        }
        else {
            rules.push({
                matchers: [new mockttp.matchers.WildcardMatcher()],
                handler: new mockttp.handlers.PassThroughHandler(),
            });
        }
        await proxy.addRules({
            matchers: [new mockttp.matchers.SimplePathMatcher(exports.opticStatusPath)],
            handler: new mockttp.handlers.CallbackHandler(() => {
                const response = {
                    statusCode: 200,
                };
                return response;
            }),
        }, ...rules);
        const requestFilter = new HttpToolkitRequestFilter(config.host, config.proxyTarget);
        await proxy.on('request', (req) => {
            const shouldCapture = !requestFilter.shouldSkip(req);
            if (!shouldCapture) {
                index_1.developerDebugLogger(`skipping ${req.method} ${req.url}`);
            }
            if (shouldCapture) {
                this.requests.set(req.id, req);
            }
        });
        await proxy.on('response', (res) => {
            if (this.requests.has(res.id)) {
                const req = this.requests.get(res.id);
                if (!req) {
                    return;
                }
                index_1.developerDebugLogger(req);
                const sample = {
                    tags: [],
                    uuid: res.id,
                    request: {
                        host: req.hostname || '',
                        method: req.method,
                        path: req.path,
                        headers: {
                            asJsonString: null,
                            asText: null,
                            shapeHashV1Base64: null,
                        },
                        query: this.extractQueryParameters(req),
                        body: this.extractBody(req),
                    },
                    response: {
                        statusCode: res.statusCode,
                        headers: {
                            shapeHashV1Base64: null,
                            asJsonString: null,
                            asText: null,
                        },
                        body: this.extractBody(res),
                    },
                };
                index_1.developerDebugLogger({ sample });
                this.events.emit('sample', sample);
                this.requests.delete(res.id);
            }
        });
        process.on('uncaughtException', (error) => {
            index_1.developerDebugLogger(error);
        });
        process.on('unhandledRejection', (reason, promise) => {
            index_1.developerDebugLogger(reason, promise);
        });
        index_1.developerDebugLogger(`trying to start proxy on port ${config.proxyPort}`);
        try {
            await proxy.start({
                startPort: config.proxyPort,
                endPort: config.proxyPort,
            });
            index_1.developerDebugLogger(`proxy started on port ${proxy.port}`);
        }
        catch (e) {
            throw new Error(`Optic couldn't start a proxy on port ${config.proxyPort} - please make sure there is nothing running there`);
        }
    }
    extractQueryParameters(req) {
        const rawQuery = url_1.default.parse(req.url).query;
        index_1.developerDebugLogger('extracting query params', { rawQuery });
        if (rawQuery) {
            const jsonLikeValue = this.config.queryParser.parse(rawQuery);
            return {
                asJsonString: this.config.flags.includeQueryString
                    ? JSON.stringify(jsonLikeValue)
                    : null,
                asText: this.config.flags.includeQueryString ? rawQuery : null,
                shapeHashV1Base64: jsonLikeValue && shape_hash_1.toBytes(jsonLikeValue).toString('base64'),
            };
        }
        else {
            return {
                asJsonString: null,
                asText: null,
                shapeHashV1Base64: null,
            };
        }
    }
    extractBody(req) {
        if (req.headers['content-type'] || req.headers['transfer-encoding']) {
            const contentType = whatwg_mimetype_1.default.parse(req.headers['content-type'] || '');
            const json = req.body.json || req.body.formData || null;
            return {
                contentType: (req.body.text && (contentType === null || contentType === void 0 ? void 0 : contentType.essence)) || null,
                value: {
                    shapeHashV1Base64: this.config.flags.includeShapeHash && json
                        ? shape_hash_1.toBytes(json).toString('base64')
                        : null,
                    asJsonString: this.config.flags.includeJsonBody && json
                        ? JSON.stringify(json)
                        : null,
                    asText: this.config.flags.includeTextBody && json
                        ? null
                        : req.body.text || null,
                },
            };
        }
        return {
            contentType: null,
            value: {
                asText: null,
                asJsonString: null,
                shapeHashV1Base64: null,
            },
        };
    }
    async stop() {
        await this.proxy.stop();
    }
}
exports.HttpToolkitCapturingProxy = HttpToolkitCapturingProxy;
