import { IApiCliConfig, IIgnoreRunnable, IOpticTaskRunnerConfig } from '@useoptic/cli-config';
import { IHttpInteraction } from '@useoptic/domain-types';
import { Command } from '@oclif/command';
export { Command };
export { Client as SaasClient } from './saas-client';
export { CommandAndProxySessionManager } from './command-and-proxy-session-manager';
export { CommandSession } from './command-session';
export { HttpToolkitCapturingProxy } from './httptoolkit-capturing-proxy';
import { developerDebugLogger, userDebugLogger } from './logger';
import { promiseFromOptic } from './conversation';
export { developerDebugLogger, userDebugLogger, promiseFromOptic };
export interface ICaptureManifest {
    samples: IHttpInteraction[];
}
export interface ICaptureLoader {
    load(): Promise<ICaptureManifest>;
    loadWithFilter(filter: IIgnoreRunnable): Promise<ICaptureManifest>;
}
export interface ICaptureSaver {
    init(): Promise<void>;
    save(sample: IHttpInteraction): Promise<void>;
    cleanup(): Promise<void>;
}
export interface ICliDaemonState {
    port: number;
    pid: number;
}
export declare function makeUiBaseUrl(daemonState: ICliDaemonState): string;
export interface IOpticTaskRunner {
    run(cli: Command, cliConfig: IApiCliConfig, taskConfig: IOpticTaskRunnerConfig, commandToRunWhenStarted?: string): Promise<void>;
}
export { CaptureSaver as SaasCaptureSaver } from './captures/avro/saas/capture-saver';
export { CaptureSaver as FileSystemAvroCaptureSaver } from './captures/avro/file-system/capture-saver';
export { CaptureLoader as FileSystemAvroCaptureLoader } from './captures/avro/file-system/capture-loader';
export { fromOptic, errorFromOptic, warningFromOptic } from './conversation';
export declare function loadPathsAndConfig(cli: Command): Promise<{
    paths: import("@useoptic/cli-config").IPathMapping;
    config: IApiCliConfig;
}>;
export declare function cleanupAndExit(): never;
export declare function delay(milliseconds: number): Promise<unknown>;
export interface IdGenerator<T> {
    nextId(): T;
}
export declare class DefaultIdGenerator implements IdGenerator<string> {
    nextId(): string;
}
export { create as createCliConfig, CliConfigObject, Env, isEnvTrue, isEnvFalse, PackageJson, } from './config';
//# sourceMappingURL=index.d.ts.map