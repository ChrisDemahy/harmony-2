"use strict";
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalCaptureInteractionPointerConverter = exports.loadBatchFile = exports.BatchInteractionIterator = exports.CaptureInteractionIterator = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const index_1 = require("./index");
const avsc_1 = __importDefault(require("avsc"));
function CaptureInteractionIterator(config, filter
//@TODO: add a way to check if the capture has completed
) {
    return __asyncGenerator(this, arguments, function* CaptureInteractionIterator_1() {
        var e_1, _a;
        let shouldStop = false;
        let skippedInteractionsCounter = BigInt(0);
        let diffedInteractionsCounter = BigInt(0);
        let currentBatchId = BigInt(0);
        while (!shouldStop) {
            const batchFilePath = path_1.default.join(config.captureBaseDirectory, config.captureId, `${currentBatchId.toString()}${index_1.captureFileSuffix}`);
            if (!(yield __await(fs_extra_1.default.pathExists(batchFilePath)))) {
                //@TODO: determine if we should wait
                return yield __await(void 0);
            }
            console.log(batchFilePath + '\n\nxxx\n\n');
            let index = 0;
            const items = BatchInteractionIterator(batchFilePath);
            try {
                for (var items_1 = (e_1 = void 0, __asyncValues(items)), items_1_1; items_1_1 = yield __await(items_1.next()), !items_1_1.done;) {
                    const x = items_1_1.value;
                    // console.log({ x, index });
                    const shouldEmit = filter(x);
                    if (shouldEmit) {
                        diffedInteractionsCounter = diffedInteractionsCounter + BigInt(1);
                        yield yield __await({
                            hasMoreInteractions: true,
                            interaction: {
                                context: {
                                    batchId: currentBatchId.toString(),
                                    index,
                                },
                                value: x,
                            },
                            skippedInteractionsCounter,
                            diffedInteractionsCounter,
                        });
                    }
                    else {
                        skippedInteractionsCounter = skippedInteractionsCounter + BigInt(1);
                        yield yield __await({
                            hasMoreInteractions: true,
                            interaction: null,
                            skippedInteractionsCounter,
                            diffedInteractionsCounter,
                        });
                        console.log(`skipping ${x.request.method} ${x.request.path}`);
                    }
                    index = index + 1;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (items_1_1 && !items_1_1.done && (_a = items_1.return)) yield __await(_a.call(items_1));
                }
                finally { if (e_1) throw e_1.error; }
            }
            const isBatchEmpty = index === 0;
            if (isBatchEmpty) {
                yield yield __await({
                    hasMoreInteractions: true,
                    interaction: null,
                    skippedInteractionsCounter,
                    diffedInteractionsCounter,
                });
            }
            currentBatchId = currentBatchId + BigInt(1);
        }
        yield yield __await({
            hasMoreInteractions: false,
            interaction: null,
            skippedInteractionsCounter,
            diffedInteractionsCounter,
        });
    });
}
exports.CaptureInteractionIterator = CaptureInteractionIterator;
function BatchInteractionIterator(batchFilePath) {
    return __asyncGenerator(this, arguments, function* BatchInteractionIterator_1() {
        const contents = yield __await(loadBatchFile(batchFilePath));
        for (const item of contents.batchItems) {
            yield yield __await(item);
        }
    });
}
exports.BatchInteractionIterator = BatchInteractionIterator;
async function loadBatchFile(batchFilePath) {
    console.time(`loadBatchFile-${batchFilePath}`);
    const decoder = avsc_1.default.createFileDecoder(batchFilePath);
    const contents = await new Promise((resolve, reject) => {
        decoder.once('data', (contents) => {
            resolve(contents);
        });
        decoder.once('error', (err) => reject(err));
    });
    console.timeEnd(`loadBatchFile-${batchFilePath}`);
    return contents;
}
exports.loadBatchFile = loadBatchFile;
class LocalCaptureInteractionPointerConverter {
    constructor(config) {
        this.config = config;
    }
    async fromPointer(pointer) {
        const [batchId, interactionIndexString] = pointer.split('-');
        const interactionIndex = parseInt(interactionIndexString, 10);
        const batchFilePath = path_1.default.join(this.config.captureBaseDirectory, this.config.captureId, `${batchId}${index_1.captureFileSuffix}`);
        const contents = await loadBatchFile(batchFilePath);
        return contents.batchItems[interactionIndex];
    }
    toPointer(interaction, context) {
        return `${context.batchId}-${context.interactionIndex}`;
    }
}
exports.LocalCaptureInteractionPointerConverter = LocalCaptureInteractionPointerConverter;
