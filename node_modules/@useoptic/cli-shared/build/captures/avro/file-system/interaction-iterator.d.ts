import { IHttpInteraction, IInteractionBatch } from '@useoptic/domain-types';
import { IFileSystemCaptureLoaderConfig } from './capture-loader';
import { CaptureId } from '@useoptic/saas-types';
export interface FilterPredicate<T> {
    (item: T): boolean;
}
export declare type InteractionIteratorItem = {
    hasMoreInteractions: false;
    interaction: null;
    skippedInteractionsCounter: bigint;
    diffedInteractionsCounter: bigint;
} | {
    hasMoreInteractions: true;
    interaction: {
        context: {
            batchId: string;
            index: number;
        };
        value: IHttpInteraction;
    } | null;
    skippedInteractionsCounter: bigint;
    diffedInteractionsCounter: bigint;
};
export declare function CaptureInteractionIterator(config: IFileSystemCaptureLoaderConfig, filter: FilterPredicate<IHttpInteraction>): AsyncGenerator<InteractionIteratorItem>;
export declare function BatchInteractionIterator(batchFilePath: string): AsyncGenerator<IHttpInteraction, void, unknown>;
export declare function loadBatchFile(batchFilePath: string): Promise<IInteractionBatch>;
export declare type InteractionPointer = string;
export interface IInteractionPointerConverter<C> {
    toPointer(interaction: IHttpInteraction, context: C): InteractionPointer;
    fromPointer(pointer: InteractionPointer): Promise<IHttpInteraction>;
}
export interface LocalCaptureInteractionContext {
    batchId: string;
    interactionIndex: number;
}
export declare class LocalCaptureInteractionPointerConverter implements IInteractionPointerConverter<LocalCaptureInteractionContext> {
    private config;
    constructor(config: {
        captureId: CaptureId;
        captureBaseDirectory: string;
    });
    fromPointer(pointer: InteractionPointer): Promise<IHttpInteraction>;
    toPointer(interaction: IHttpInteraction, context: LocalCaptureInteractionContext): InteractionPointer;
}
//# sourceMappingURL=interaction-iterator.d.ts.map