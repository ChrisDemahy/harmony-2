"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
//@ts-ignore
const oboe_1 = __importDefault(require("oboe"));
const capture_saver_1 = require("./capture-saver");
async function main(inputFilePath, outputBaseDirectory, captureId = 'ccc') {
    console.log({ inputFilePath });
    const input = fs_extra_1.default.createReadStream(inputFilePath);
    const events = [];
    const captureBaseDirectory = path_1.default.join(outputBaseDirectory, '.optic', 'captures');
    const captureSaver = new capture_saver_1.CaptureSaver({
        captureBaseDirectory,
        captureId,
    });
    await captureSaver.init();
    await new Promise((resolve, reject) => {
        oboe_1.default(input)
            .on('node', {
            // @ts-ignore
            'events.*': function (event) {
                console.count('event');
                //console.log({ event });
                events.push(event);
            },
            'session.samples.*': function (sample) {
                console.count('sample');
                //console.log({ sample });
                captureSaver.save(sample);
            },
        })
            .on('done', function () {
            console.log('done');
            resolve();
        })
            .on('fail', function (e) {
            console.error(e);
            reject(e);
        });
    });
    const files = [
        {
            location: path_1.default.join(outputBaseDirectory, 'optic.yml'),
            contents: `name: ${JSON.stringify(path_1.default.basename(inputFilePath))}`,
        },
        {
            location: path_1.default.join(outputBaseDirectory, '.optic', 'api', 'specification.json'),
            contents: JSON.stringify(events),
        },
        {
            location: path_1.default.join(outputBaseDirectory, '.optic', 'captures', captureId, 'optic-capture-state.json'),
            contents: JSON.stringify({
                captureId,
                status: 'completed',
                metadata: {
                    startedAt: new Date().toISOString(),
                    taskConfig: null,
                    lastInteraction: null,
                },
            }),
        },
    ];
    await Promise.all(files.map(async (x) => {
        const { location, contents } = x;
        await fs_extra_1.default.ensureDir(path_1.default.dirname(location));
        return fs_extra_1.default.writeFile(location, contents);
    }));
}
const [, , inputFilePath, outputBaseDirectory, captureId] = process.argv;
main(inputFilePath, outputBaseDirectory, captureId);
