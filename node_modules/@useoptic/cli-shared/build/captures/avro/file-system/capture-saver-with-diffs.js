"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CaptureSaverWithDiffs = exports.coverageFilePrefix = void 0;
const index_1 = require("../../../index");
const domain_utilities_1 = require("@useoptic/domain-utilities");
const domain_1 = require("@useoptic/domain");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const cli_config_1 = require("@useoptic/cli-config");
exports.coverageFilePrefix = 'coverage-';
class CaptureSaverWithDiffs extends index_1.FileSystemAvroCaptureSaver {
    constructor(config, cliConfig, specServiceClient) {
        super(config);
        this.cliConfig = cliConfig;
        this.specServiceClient = specServiceClient;
    }
    async init() {
        //@GOTCHA: if the user updates the spec while the capture is live, the diff data will potentially be inaccurate
        const eventsString = await this.specServiceClient.listEvents();
        const events = JSON.parse(eventsString);
        const { eventStore, rfcState, rfcService, rfcId } = domain_utilities_1.universeFromEvents(events);
        const queries = domain_1.Queries(eventStore, rfcService, rfcId);
        const shapesResolvers = queries.shapesResolvers();
        this.rfcState = rfcState;
        this.shapesResolvers = shapesResolvers;
        index_1.developerDebugLogger('built initial spec for diffing on the fly');
        await super.init();
    }
    async onBatch(groupingIdentifiers, batchId, items, outputDirectory) {
        const result = super.onBatch(groupingIdentifiers, batchId, items, outputDirectory);
        //@TODO: create an endpoint within spec-router that has similar logic but takes the spec and interactions as inputs
        const filter = cli_config_1.parseIgnore(this.cliConfig.ignoreRequests || []);
        const filteredItems = items.filter((x) => !filter.shouldIgnore(x.request.method, x.request.path));
        // diff report
        const diffs = domain_utilities_1.diffFromRfcStateAndInteractions(this.shapesResolvers, this.rfcState, items);
        const distinctDiffCount = domain_1.DiffHelpers.distinctDiffCount(diffs);
        const diffsAsJs = domain_1.opticEngine.DiffJsonSerializer.toJs(diffs);
        index_1.developerDebugLogger({ distinctDiffCount });
        await fs_extra_1.default.writeJson(path_1.default.join(outputDirectory, `interactions-${batchId}.json`), {
            interactionsCount: filteredItems.length,
            totalInteractionsCount: items.length,
            diffsCount: distinctDiffCount,
            createdAt: new Date().toISOString(),
        });
        await fs_extra_1.default.writeJson(path_1.default.join(outputDirectory, `diffs-${batchId}.json`), diffsAsJs);
        // coverage report as JS
        const report = domain_1.opticEngine.com.useoptic.diff.helpers
            .CoverageHelpers()
            .getCoverage(this.shapesResolvers, this.rfcState, domain_1.JsonHelper.jsArrayToSeq(items.map((x) => domain_1.JsonHelper.fromInteraction(x))));
        const asJs = domain_1.opticEngine.CoverageReportJsonSerializer.toJs(report);
        await fs_extra_1.default.writeJson(path_1.default.join(outputDirectory, `${exports.coverageFilePrefix}${batchId}.json`), asJs);
        return result;
    }
}
exports.CaptureSaverWithDiffs = CaptureSaverWithDiffs;
