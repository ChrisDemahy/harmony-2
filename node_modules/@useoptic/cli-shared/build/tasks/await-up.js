"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.awaitTaskUp = void 0;
const cli_config_1 = require("@useoptic/cli-config");
const wait_on_1 = __importDefault(require("wait-on"));
async function awaitTaskUp(mode, runnerConfig) {
    const proxyStartedPromise = (() => {
        const proxyConfig = runnerConfig.proxyConfig;
        const proxyPort = proxyConfig.port;
        const proxyHost = proxyConfig.host;
        const expected = `${proxyHost}:${proxyPort}`;
        return new Promise((resolve) => {
            wait_on_1.default({
                resources: [`tcp:${expected}`],
                delay: 0,
                tcpTimeout: 500,
                timeout: 60000,
            })
                .then(() => {
                resolve(true);
            }) //if service resolves we assume it's up.
                .catch(() => resolve(false));
        });
    })();
    const serviceStartedPromise = (() => {
        const serviceConfig = runnerConfig.serviceConfig;
        const servicePort = serviceConfig.port;
        return new Promise((resolve) => {
            wait_on_1.default({
                resources: [`tcp:${servicePort}`],
                delay: 0,
                tcpTimeout: 500,
                timeout: 60000,
            })
                .then(() => {
                resolve(true);
            }) //if service resolves we assume it's up.
                .catch(() => resolve(false));
        });
    })();
    if (mode === cli_config_1.Modes.Recommended) {
        await Promise.all([serviceStartedPromise, proxyStartedPromise]);
    }
    if (mode === cli_config_1.Modes.Manual) {
        await Promise.all([proxyStartedPromise]);
    }
}
exports.awaitTaskUp = awaitTaskUp;
