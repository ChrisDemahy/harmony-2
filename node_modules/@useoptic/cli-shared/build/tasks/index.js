"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliTaskSession = void 0;
const cli_config_1 = require("@useoptic/cli-config");
const colors_1 = __importDefault(require("colors"));
const conversation_1 = require("../conversation");
class CliTaskSession {
    constructor(runner) {
        this.runner = runner;
    }
    async start(cli, config, taskName, commandToRunWhenStarted) {
        try {
            const task = config.tasks[taskName];
            if (!task) {
                throw new cli_config_1.TaskNotFoundError(taskName);
            }
            const taskConfig = await cli_config_1.TaskToStartConfig(task);
            await this.runner.run(cli, config, taskConfig, commandToRunWhenStarted);
        }
        catch (e) {
            if (e instanceof cli_config_1.TargetPortUnavailableError) {
                cli.log(conversation_1.errorFromOptic(e.message));
            }
            else if (e instanceof cli_config_1.TaskNotFoundError) {
                cli.log(conversation_1.errorFromOptic(`No task named ${colors_1.default.bold(taskName)} found in optic.yml`));
            }
            else {
                cli.error(e);
            }
        }
    }
}
exports.CliTaskSession = CliTaskSession;
