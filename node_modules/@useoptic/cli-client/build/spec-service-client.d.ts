/// <reference types="node" />
import { EventEmitter } from 'events';
import { IApiCliConfig } from '@useoptic/cli-config';
interface IEventStore {
    serializeEvents(rfcId: RfcId): JsonString;
}
declare type JsonString = string;
declare type ListCapturesResponse = any;
declare type RfcId = string;
declare type SpecId = string;
declare type CaptureId = string;
declare type GetCaptureStatusResponse = any;
declare type ListCapturedSamplesResponse = any;
export interface ISpecService {
    loadConfig(): Promise<{
        config: IApiCliConfig;
        configRaw: string;
    }>;
    saveConfig(config: string): Promise<void>;
    addIgnoreRule(rule: string): Promise<void>;
    listEvents(): Promise<string>;
    saveEvents(eventStore: IEventStore, rfcId: RfcId): Promise<void>;
    listCaptures(): Promise<ListCapturesResponse>;
    listCapturedSamples(captureId: CaptureId): Promise<ListCapturedSamplesResponse>;
    getCaptureStatus(captureId: CaptureId): Promise<GetCaptureStatusResponse>;
}
export declare class Client implements ISpecService {
    private specId;
    private eventEmitter;
    private baseUrl;
    constructor(specId: SpecId, eventEmitter: EventEmitter, baseUrl?: string);
    addIgnoreRule(rule: string): Promise<void>;
    loadConfig(): Promise<{
        config: IApiCliConfig;
        configRaw: string;
    }>;
    saveConfig(config: string): Promise<void>;
    listEvents(): Promise<string>;
    listCaptures(): Promise<any>;
    saveEvents(eventStore: IEventStore, rfcId: RfcId): Promise<any>;
    listCapturedSamples(captureId: CaptureId): Promise<{
        samples: any;
        metadata: any;
    }>;
    getCaptureStatus(captureId: CaptureId): Promise<any>;
    getTestingCredentials(): Promise<Response>;
    getEnabledFeatures(): Promise<{
        TESTING_DASHBOARD: boolean;
    }>;
}
export {};
//# sourceMappingURL=spec-service-client.d.ts.map