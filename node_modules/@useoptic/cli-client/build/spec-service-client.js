"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const bottleneck_1 = __importDefault(require("bottleneck"));
const client_utilities_1 = require("@useoptic/client-utilities");
const outgoingPoll = new bottleneck_1.default({
    maxConcurrent: 1,
    minTime: 1000,
});
class Client {
    constructor(specId, eventEmitter, baseUrl = '/api') {
        this.specId = specId;
        this.eventEmitter = eventEmitter;
        this.baseUrl = baseUrl;
    }
    addIgnoreRule(rule) {
        return client_utilities_1.JsonHttpClient.patchJson(`${this.baseUrl}/specs/${this.specId}/ignores`, { rule });
    }
    async loadConfig() {
        return await client_utilities_1.JsonHttpClient.getJson(`${this.baseUrl}/specs/${this.specId}/config`);
    }
    async saveConfig(config) {
        return await client_utilities_1.JsonHttpClient.postJson(`${this.baseUrl}/specs/${this.specId}/config/raw`, { raw: config });
    }
    listEvents() {
        return client_utilities_1.JsonHttpClient.getJsonAsText(`${this.baseUrl}/specs/${this.specId}/events`);
    }
    listCaptures() {
        return client_utilities_1.JsonHttpClient.getJson(`${this.baseUrl}/specs/${this.specId}/captures`);
    }
    saveEvents(eventStore, rfcId) {
        const serializedEvents = eventStore.serializeEvents(rfcId);
        return client_utilities_1.JsonHttpClient.putJsonString(`${this.baseUrl}/specs/${this.specId}/events`, serializedEvents).then((x) => {
            this.eventEmitter.emit('events-updated');
            return x;
        });
    }
    listCapturedSamples(captureId) {
        return outgoingPoll.schedule(() => {
            return client_utilities_1.JsonHttpClient.getJson(`${this.baseUrl}/specs/${this.specId}/captures/${captureId}/samples`).then((body) => {
                return {
                    samples: body.samples,
                    metadata: body.metadata,
                };
            });
        });
    }
    getCaptureStatus(captureId) {
        return client_utilities_1.JsonHttpClient.getJson(`${this.baseUrl}/specs/${this.specId}/captures/${captureId}/status`);
    }
    getTestingCredentials() {
        return client_utilities_1.JsonHttpClient.getJsonWithoutHandlingResponse(`${this.baseUrl}/specs/${this.specId}/testing-credentials`);
    }
    async getEnabledFeatures() {
        const response = await this.getTestingCredentials();
        return {
            TESTING_DASHBOARD: response.status >= 200 && response.status <= 299,
        };
    }
}
exports.Client = Client;
