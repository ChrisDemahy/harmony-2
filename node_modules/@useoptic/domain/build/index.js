"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangeLogFacade = exports.OpticIds = exports.UrlCounterHelper = exports.DiffResultHelper = exports.DiffHelpers = exports.DiffPreviewer = exports.DiffManagerFacade = exports.StableHashableWrapper = exports.OasProjectionHelper = exports.ContentTypeHelpers = exports.BodyUtilities = exports.InteractionDiffer = exports.getJson = exports.getIndex = exports.toOption = exports.lengthScala = exports.everyScala = exports.headOrUndefined = exports.getOrUndefinedJson = exports.getOrUndefined = exports.filterScala = exports.mapScala = exports.JsonHelper = exports.commandToJs = exports.commandsToJs = exports.commandsFromJson = exports.commandsToJson = exports.Queries = exports.Facade = exports.JsonTrailHelper = exports.CompareEquality = exports.ScalaJSHelpers = exports.RfcCommandContext = exports.RequestsCommands = exports.RfcCommands = exports.ContentTypesHelper = exports.RequestsHelper = exports.ShapesHelper = exports.ShapesCommands = exports.setLogger = exports.opticEngine = void 0;
exports.opticEngine = require('./domain.js');
const { contexts, diff } = exports.opticEngine.com.useoptic;
function setLogger(f) {
    const wrapper = new exports.opticEngine.com.useoptic.LoggerWrapper(f);
    exports.opticEngine.Logger.setLoggerImplementation(wrapper);
}
exports.setLogger = setLogger;
exports.ShapesCommands = contexts.shapes.Commands;
exports.ShapesHelper = contexts.shapes.ShapesHelper();
exports.RequestsHelper = contexts.requests.RequestsServiceHelper();
exports.ContentTypesHelper = contexts.requests.ContentTypes();
exports.RfcCommands = contexts.rfc.Commands;
exports.RequestsCommands = contexts.requests.Commands;
exports.RfcCommandContext = contexts.rfc.RfcCommandContext;
exports.ScalaJSHelpers = exports.opticEngine.ScalaJSHelpers;
exports.CompareEquality = exports.opticEngine.com.useoptic.CompareEquality();
exports.JsonTrailHelper = exports.opticEngine.com.useoptic.JsonTrailHelper();
exports.Facade = contexts.rfc.RfcServiceJSFacade();
exports.Queries = (eventStore, service, aggregateId) => new exports.opticEngine.Queries(eventStore, service, aggregateId);
function commandsToJson(commands) {
    return commands.map((x) => JSON.parse(exports.opticEngine.CommandSerialization.toJsonString(x)));
}
exports.commandsToJson = commandsToJson;
function commandsFromJson(commands) {
    return exports.opticEngine.CommandSerialization.fromJsonString(JSON.stringify(commands));
}
exports.commandsFromJson = commandsFromJson;
function commandsToJs(commandSequence) {
    return exports.opticEngine.CommandSerialization.toJs(commandSequence);
}
exports.commandsToJs = commandsToJs;
function commandToJs(command) {
    return exports.opticEngine.CommandSerialization.toJs(command);
}
exports.commandToJs = commandToJs;
exports.JsonHelper = exports.opticEngine.com.useoptic.JsonHelper();
function fromJs(x) {
    if (typeof x === 'undefined') {
        return exports.JsonHelper.toNone();
    }
    return exports.JsonHelper.toSome(exports.JsonHelper.fromString(JSON.stringify(x)));
}
exports.mapScala = (collection) => (handler) => {
    return exports.ScalaJSHelpers.toJsArray(collection).map(handler);
};
exports.filterScala = (collection) => (handler) => {
    return exports.ScalaJSHelpers.toJsArray(collection).filter(handler);
};
exports.getOrUndefined = (option) => {
    return exports.ScalaJSHelpers.getOrUndefined(option);
};
exports.getOrUndefinedJson = (option) => {
    return exports.ScalaJSHelpers.getOrUndefinedJson(option);
};
exports.headOrUndefined = (seq) => {
    return exports.ScalaJSHelpers.headOrUndefined(seq);
};
exports.everyScala = (collection) => (handler) => {
    return exports.ScalaJSHelpers.toJsArray(collection).every(handler);
};
exports.lengthScala = (collection) => {
    return exports.ScalaJSHelpers.length(collection);
};
exports.toOption = (undefOr) => {
    return exports.ScalaJSHelpers.toOption(undefOr);
};
exports.getIndex = (collection) => (index) => {
    return exports.ScalaJSHelpers.getIndex(collection, index);
};
exports.getJson = (j) => {
    return exports.ScalaJSHelpers.getJson(j);
};
exports.InteractionDiffer = diff.InteractionDiffer;
exports.BodyUtilities = exports.opticEngine.com.useoptic.diff.interactions.BodyUtilities();
exports.ContentTypeHelpers = exports.opticEngine.com.useoptic.diff.interactions.ContentTypeHelpers();
exports.OasProjectionHelper = exports.opticEngine.com.useoptic.OASProjectionHelper();
exports.StableHashableWrapper = exports.opticEngine.com.useoptic.StableHashableWrapper;
exports.DiffManagerFacade = exports.opticEngine.com.useoptic.DiffManagerFacade();
exports.DiffPreviewer = exports.opticEngine.com.useoptic.ux.DiffPreviewer;
exports.DiffHelpers = exports.opticEngine.com.useoptic.diff.helpers.DiffHelpers();
exports.DiffResultHelper = exports.opticEngine.com.useoptic.ux.DiffResultHelper();
exports.UrlCounterHelper = exports.opticEngine.com.useoptic.UrlCounterHelper();
exports.OpticIds = exports.opticEngine.com.useoptic.OpticIdsJs();
exports.ChangeLogFacade = exports.opticEngine.com.useoptic.ChangeLogFacade();
