"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizedDiffFromRfcStateAndInteractions = exports.diffFromRfcStateAndInteractions = exports.deserializeInteractions = exports.serializeReport = exports.reportFromRfcStateAndInteractions = exports.reportFromEventsAndInteractions = exports.rfcStateFromEvents = exports.cachingResolversAndRfcStateFromEventsAndAdditionalCommandsSeq = exports.cachingResolversAndRfcStateFromEventsAndAdditionalCommands = exports.cachingResolversAndRfcStateFromEvents = exports.universeFromEventsAndAdditionalCommands = exports.universeFromEvents = void 0;
const coverage_1 = require("./coverage");
const domain_1 = require("@useoptic/domain");
var coverage_2 = require("./coverage");
Object.defineProperty(exports, "StableHasher", { enumerable: true, get: function () { return coverage_2.StableHasher; } });
function universeFromEvents(events) {
    const { contexts } = domain_1.opticEngine.com.useoptic;
    const { RfcServiceJSFacade } = contexts.rfc;
    const rfcServiceFacade = RfcServiceJSFacade();
    const eventStore = rfcServiceFacade.makeEventStore();
    const rfcId = 'testRfcId';
    const eventsAsJson = domain_1.opticEngine.EventSerialization.fromJs(events);
    eventStore.append(rfcId, eventsAsJson);
    const rfcService = rfcServiceFacade.makeRfcService(eventStore);
    const rfcState = rfcService.currentState(rfcId);
    return {
        rfcState,
        eventStore,
        rfcId,
        rfcService,
    };
}
exports.universeFromEvents = universeFromEvents;
function universeFromEventsAndAdditionalCommands(events, commandsContext, commands) {
    const { contexts } = domain_1.opticEngine.com.useoptic;
    const { RfcServiceJSFacade } = contexts.rfc;
    const rfcServiceFacade = RfcServiceJSFacade();
    const eventStore = rfcServiceFacade.makeEventStore();
    const rfcId = 'testRfcId';
    const eventsAsJson = domain_1.opticEngine.EventSerialization.fromJs(events);
    //process the initial events
    eventStore.append(rfcId, eventsAsJson);
    const rfcService = rfcServiceFacade.makeRfcService(eventStore);
    //tack on the additional commands
    rfcService.handleCommands(rfcId, commandsContext, ...commands);
    const rfcState = rfcService.currentState(rfcId);
    return {
        rfcState,
        eventStore,
        rfcId,
        rfcService,
    };
}
exports.universeFromEventsAndAdditionalCommands = universeFromEventsAndAdditionalCommands;
function cachingResolversAndRfcStateFromEvents(events, extraCommands) {
    const { rfcState } = universeFromEvents(events);
    const resolvers = domain_1.opticEngine.ShapesResolvers.newCachingResolver(rfcState);
    return { resolvers, rfcState };
}
exports.cachingResolversAndRfcStateFromEvents = cachingResolversAndRfcStateFromEvents;
function cachingResolversAndRfcStateFromEventsAndAdditionalCommands(events, commandsContext, additionalCommands) {
    const { rfcState } = universeFromEventsAndAdditionalCommands(events, commandsContext, additionalCommands);
    const resolvers = domain_1.opticEngine.ShapesResolvers.newCachingResolver(rfcState);
    return { resolvers, rfcState };
}
exports.cachingResolversAndRfcStateFromEventsAndAdditionalCommands = cachingResolversAndRfcStateFromEventsAndAdditionalCommands;
function cachingResolversAndRfcStateFromEventsAndAdditionalCommandsSeq(events, commandsContext, additionalCommandsSeq) {
    return cachingResolversAndRfcStateFromEventsAndAdditionalCommands(events, commandsContext, domain_1.JsonHelper.seqToJsArray(additionalCommandsSeq));
}
exports.cachingResolversAndRfcStateFromEventsAndAdditionalCommandsSeq = cachingResolversAndRfcStateFromEventsAndAdditionalCommandsSeq;
function rfcStateFromEvents(events) {
    const { rfcState } = universeFromEvents(events);
    return rfcState;
}
exports.rfcStateFromEvents = rfcStateFromEvents;
function reportFromEventsAndInteractions(shapesResolvers, events, interactions) {
    const rfcState = rfcStateFromEvents(events);
    const report = domain_1.opticEngine.com.useoptic.diff.helpers
        .CoverageHelpers()
        .getCoverage(shapesResolvers, rfcState, interactions);
    return report;
}
exports.reportFromEventsAndInteractions = reportFromEventsAndInteractions;
function reportFromRfcStateAndInteractions(shapesResolvers, rfcState, interactions) {
    const report = domain_1.opticEngine.com.useoptic.diff.helpers
        .CoverageHelpers()
        .getCoverage(shapesResolvers, rfcState, interactions);
    return report;
}
exports.reportFromRfcStateAndInteractions = reportFromRfcStateAndInteractions;
function serializeReport(report) {
    const converter = new domain_1.opticEngine.com.useoptic.CoverageReportConverter(coverage_1.StableHasher);
    return converter.toJs(report);
}
exports.serializeReport = serializeReport;
function deserializeInteractions(serializedInteractions) {
    const parsedInteractions = serializedInteractions.map((x) => domain_1.JsonHelper.fromInteraction(x));
    const parsedInteractionsSeq = domain_1.JsonHelper.jsArrayToSeq(parsedInteractions);
    return parsedInteractionsSeq;
}
exports.deserializeInteractions = deserializeInteractions;
function diffFromRfcStateAndInteractions(shapesResolvers, rfcState, interactions) {
    const diffResults = domain_1.DiffHelpers.groupByDiffs(shapesResolvers, rfcState, deserializeInteractions(interactions));
    return diffResults;
}
exports.diffFromRfcStateAndInteractions = diffFromRfcStateAndInteractions;
function normalizedDiffFromRfcStateAndInteractions(shapesResolvers, rfcState, interactions) {
    const diffResults = domain_1.DiffHelpers.groupByNormalizedDiffs(shapesResolvers, rfcState, deserializeInteractions(interactions));
    return diffResults;
}
exports.normalizedDiffFromRfcStateAndInteractions = normalizedDiffFromRfcStateAndInteractions;
