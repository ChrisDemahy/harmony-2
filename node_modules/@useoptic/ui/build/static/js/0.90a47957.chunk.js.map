{"version":3,"sources":["components/diff/v2/learn-api/browser-initial-body.ts","services/diff/ExampleDiffService.ts"],"names":["LearnAPIHelper","opticEngine","com","useoptic","diff","interactions","interpreters","localInitialBodyLearner","rfcState","pathId","method","undocumentedUrlHelpers","helpers","UndocumentedUrlIncrementalHelpers","shapeBuilderMap","newShapeBuilderMap","endpoint","filter","interaction","ScalaJSHelpers","getOrUndefined","tryResolvePathId","request","path","forEach","i","deserializedInteraction","JsonHelper","fromInteraction","learnBody","requests","mapScala","requestRegions","contentType","commands","CommandSerialization","toJs","rootShapeId","responses","responseRegions","response","statusCode","ExampleCaptureService","specService","baseUrl","events","ignoreRequests","additionalCommands","filters","diffId","uuidv4","notificationsUrl","interactionPointer","this","listCapturedSamples","captureId","capture","samples","find","x","uuid","ExampleDiffService","captureService","diffConfig","diffs","endpointDiffs","toJsArray","DiffResultHelper","Promise","resolve","samplesSeq","jsArrayToSeq","map","UndocumentedUrlHelpers","counter","countUndocumentedUrls","urls","UrlCounterJsonSerializer","toFriendlyJs","result","UrlCounterHelper","fromJsonToSeq","diffedInteractionsCounter","length","toString","skippedInteractionsCounter","loadInteraction","firstInteractionPointer","descriptionFromDiff","suggestionsForDiff","currentInteraction","inferPolymorphism","bodyPreview","previewBodyRender","all","interactionPointers","a","shapePreview","previewShapeRender","jsArrayToVector","shape","suggestion","rfcService","rfcId","currentState"],"mappings":"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","file":"static/js/0.90a47957.chunk.js","sourcesContent":["import {\n  getOrUndefined,\n  JsonHelper,\n  mapScala,\n  opticEngine,\n  ScalaJSHelpers,\n} from '@useoptic/domain';\nimport { IHttpInteraction } from '@useoptic/domain-types';\nimport { ILearnedBodies } from '@useoptic/cli-shared/build/diffs/initial-types';\n\nconst LearnAPIHelper = opticEngine.com.useoptic.diff.interactions.interpreters.LearnAPIHelper();\n\nexport function localInitialBodyLearner(\n  rfcState: any,\n  pathId: string,\n  method: string,\n  interactions: any[]\n): ILearnedBodies {\n  const undocumentedUrlHelpers = new opticEngine.com.useoptic.diff.helpers.UndocumentedUrlIncrementalHelpers(\n    rfcState\n  );\n\n  const shapeBuilderMap = LearnAPIHelper.newShapeBuilderMap(pathId, method);\n\n  function filterByEndpoint(endpoint: { pathId: string; method: string }) {\n    return function (interaction: IHttpInteraction) {\n      const pathId = ScalaJSHelpers.getOrUndefined(\n        undocumentedUrlHelpers.tryResolvePathId(interaction.request.path)\n      );\n      return (\n        endpoint.method === interaction.request.method &&\n        endpoint.pathId === pathId\n      );\n    };\n  }\n\n  const filter = filterByEndpoint({ pathId, method });\n\n  interactions.forEach((i) => {\n    const deserializedInteraction = JsonHelper.fromInteraction(i);\n    if (filter(i)) {\n      // only learn if it matches the endpoint\n      LearnAPIHelper.learnBody(deserializedInteraction, shapeBuilderMap);\n    }\n  });\n\n  return {\n    pathId,\n    method,\n    requests: mapScala(shapeBuilderMap.requestRegions)((request: any) => ({\n      contentType: getOrUndefined(request.contentType),\n      commands: opticEngine.CommandSerialization.toJs(request.commands),\n      rootShapeId: request.rootShapeId,\n    })),\n    responses: mapScala(shapeBuilderMap.responseRegions)((response: any) => ({\n      contentType: getOrUndefined(response.contentType),\n      statusCode: response.statusCode,\n      commands: opticEngine.CommandSerialization.toJs(response.commands),\n      rootShapeId: response.rootShapeId,\n    })),\n  };\n}\n","import {\n  ICaptureService,\n  IDiffService,\n  IGetDescriptionResponse,\n  IListDiffsResponse,\n  IListSuggestionsResponse,\n  IListUnrecognizedUrlsResponse,\n  ILoadInteractionResponse,\n  ILoadStatsResponse,\n  IRfcCommand,\n  IStartDiffResponse,\n} from './index';\nimport { IHttpInteraction } from '@useoptic/domain-types';\nimport { ISpecService } from '@useoptic/cli-client/build/spec-service-client';\nimport { captureId } from '../../components/loaders/ApiLoader';\nimport {\n  DiffResultHelper,\n  JsonHelper,\n  RfcCommandContext,\n  ScalaJSHelpers,\n  UrlCounterHelper,\n} from '@useoptic/domain/build';\nimport * as DiffEngine from '@useoptic/diff-engine-wasm/browser';\nimport uuidv4 from 'uuid/v4';\nimport { getOrUndefined, opticEngine } from '@useoptic/domain';\nimport { ILearnedBodies } from '@useoptic/cli-shared/build/diffs/initial-types';\nimport { localInitialBodyLearner } from '../../components/diff/v2/learn-api/browser-initial-body';\n\nexport class ExampleCaptureService implements ICaptureService {\n  constructor(private specService: ISpecService) {}\n\n  async startDiff(\n    events: any[],\n    ignoreRequests: string[],\n    additionalCommands: IRfcCommand[],\n    filters: { pathId: string; method: string }[]\n  ): Promise<IStartDiffResponse> {\n    return {\n      diffId: uuidv4(),\n      notificationsUrl: '',\n    };\n  }\n\n  async loadInteraction(\n    interactionPointer: string\n  ): Promise<ILoadInteractionResponse> {\n    const capture = await this.specService.listCapturedSamples(captureId);\n    const interaction = capture.samples.find(\n      (x: IHttpInteraction) => x.uuid === interactionPointer\n    );\n    return {\n      interaction,\n    };\n  }\n\n  baseUrl = '';\n}\n\nexport class ExampleDiffService implements IDiffService {\n  constructor(\n    private specService: ISpecService,\n    private captureService: ICaptureService,\n    private diffConfig: IStartDiffResponse,\n    private diffs: any,\n    private rfcState: any\n  ) {}\n\n  diffId(): string {\n    return this.diffConfig.diffId;\n  }\n\n  async listDiffs(): Promise<IListDiffsResponse> {\n    const endpointDiffs = ScalaJSHelpers.toJsArray(\n      DiffResultHelper.endpointDiffs(this.diffs, this.rfcState)\n    );\n\n    return Promise.resolve({ diffs: endpointDiffs });\n  }\n\n  async listUnrecognizedUrls(): Promise<IListUnrecognizedUrlsResponse> {\n    const capture = await this.specService.listCapturedSamples(captureId);\n    const samplesSeq = JsonHelper.jsArrayToSeq(\n      capture.samples.map((x) => JsonHelper.fromInteraction(x))\n    );\n    const undocumentedUrlHelpers = new opticEngine.com.useoptic.diff.helpers.UndocumentedUrlHelpers();\n    const counter = undocumentedUrlHelpers.countUndocumentedUrls(\n      this.rfcState,\n      samplesSeq\n    );\n    const urls = opticEngine.UrlCounterJsonSerializer.toFriendlyJs(counter);\n\n    const result = UrlCounterHelper.fromJsonToSeq(urls, this.rfcState);\n\n    return Promise.resolve(result);\n  }\n\n  async loadStats(): Promise<ILoadStatsResponse> {\n    const capture = await this.specService.listCapturedSamples(captureId);\n\n    return Promise.resolve({\n      diffedInteractionsCounter: capture.samples.length.toString(),\n      skippedInteractionsCounter: '0',\n    });\n  }\n\n  async loadDescription(diff: any): Promise<IGetDescriptionResponse> {\n    const interaction = await this.captureService.loadInteraction(\n      diff.firstInteractionPointer\n    );\n    if (interaction.interaction) {\n      return getOrUndefined(\n        DiffResultHelper.descriptionFromDiff(\n          diff,\n          this.rfcState,\n          JsonHelper.fromInteraction(interaction.interaction)\n        )\n      );\n    } else {\n      return null;\n    }\n  }\n\n  async listSuggestions(\n    diff: any,\n    interaction: any\n  ): Promise<IListSuggestionsResponse> {\n    return ScalaJSHelpers.toJsArray(\n      DiffResultHelper.suggestionsForDiff(diff, interaction, this.rfcState)\n    );\n  }\n\n  async loadInitialPreview(\n    diff: any,\n    currentInteraction: any,\n    inferPolymorphism: boolean\n  ) {\n    const bodyPreview = diff.previewBodyRender(currentInteraction);\n\n    let interactions = [];\n    if (inferPolymorphism) {\n      interactions = await Promise.all(\n        ScalaJSHelpers.toJsArray(diff.interactionPointers).map(async (i) => {\n          const { interaction } = await this.captureService.loadInteraction(i);\n          return JsonHelper.fromInteraction(interaction);\n        })\n      );\n    } else {\n      interactions = [currentInteraction];\n    }\n\n    const shapePreview = diff.previewShapeRender(\n      this.rfcState,\n      JsonHelper.jsArrayToVector(interactions),\n      inferPolymorphism\n    );\n\n    return {\n      bodyPreview,\n      shapePreview: shapePreview.shape,\n      suggestion: shapePreview.suggestion,\n    };\n  }\n\n  async learnInitial(\n    rfcService: any,\n    rfcId: any,\n    pathId: string,\n    method: string\n  ): Promise<ILearnedBodies> {\n    const capture = await this.specService.listCapturedSamples(captureId);\n    const interactions = capture.samples;\n\n    const rfcState = rfcService.currentState(rfcId);\n\n    return localInitialBodyLearner(rfcState, pathId, method, interactions);\n  }\n}\n"],"sourceRoot":""}