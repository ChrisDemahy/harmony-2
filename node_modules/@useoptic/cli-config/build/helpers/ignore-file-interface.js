"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IgnoreFileHelper = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const index_1 = require("../index");
const proper_lockfile_1 = __importDefault(require("proper-lockfile"));
class IgnoreFileHelper {
    constructor(ignoreFilePath, opticYamlPath) {
        this.ignoreFilePath = ignoreFilePath;
        this.opticYamlPath = opticYamlPath;
    }
    async getCurrentIgnoreRules() {
        const ignoreFile = path_1.default.resolve(this.ignoreFilePath);
        await fs_extra_1.default.ensureFile(ignoreFile);
        const contents = await safeRead(this.ignoreFilePath);
        const lines = splitLines(contents);
        const rules = [];
        lines.forEach((line, index) => {
            if (line.trim() !== '' && !line.trim().startsWith('#')) {
                rules.push({
                    line: index,
                    rule: line,
                });
            }
        });
        const rulesFromYamlDeprecated = await this.loadDeprecatedRules();
        return {
            filePath: path_1.default.resolve(ignoreFile),
            ruleLines: rules,
            rulesFromYamlDeprecated,
            allRules: [...rules.map((i) => i.rule), ...rulesFromYamlDeprecated],
        };
    }
    async loadDeprecatedRules() {
        try {
            const config = await index_1.readApiConfig(this.opticYamlPath);
            const ignores = config.ignoreRequests || [];
            return ignores;
        }
        catch (e) {
            return [];
        }
    }
    async appendRule(rule) {
        const contents = await safeRead(this.ignoreFilePath);
        await safeWrite(this.ignoreFilePath, contents.trim() + '\n' + rule);
    }
}
exports.IgnoreFileHelper = IgnoreFileHelper;
async function safeRead(filePath) {
    await proper_lockfile_1.default.lock(filePath, {
        retries: { retries: 10 },
    });
    const contents = (await fs_extra_1.default.readFile(filePath)).toString();
    await proper_lockfile_1.default.unlock(filePath);
    return contents;
}
async function safeWrite(filePath, contents) {
    await proper_lockfile_1.default.lock(filePath, {
        retries: { retries: 10 },
    });
    await fs_extra_1.default.writeFile(filePath, contents);
    await proper_lockfile_1.default.unlock(filePath);
}
function splitLines(t) {
    return t.split(/\r\n|\r|\n/);
}
