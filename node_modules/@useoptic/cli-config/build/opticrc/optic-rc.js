"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrCreateAnonId = exports.getCurrentStorage = exports.defaultStorage = exports.opticrcPath = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
//@ts-ignore
const human_readable_ids_1 = require("human-readable-ids");
exports.opticrcPath = path_1.default.resolve(os_1.default.homedir(), '.opticrc');
function defaultStorage() {
    return {
        idToken: undefined,
        anonymousId: human_readable_ids_1.hri.random(),
    };
}
exports.defaultStorage = defaultStorage;
async function getCurrentStorage() {
    try {
        const storage = await fs_extra_1.default.readJSON(exports.opticrcPath);
        return storage;
    }
    catch (e) {
        return undefined;
    }
}
exports.getCurrentStorage = getCurrentStorage;
async function getOrCreateAnonId() {
    const storage = await getCurrentStorage();
    if (storage && storage.anonymousId) {
        return storage.anonymousId;
    }
    else if (storage) {
        const storeValue = Object.assign(Object.assign({}, storage), { anonymousId: human_readable_ids_1.hri.random() });
        await fs_extra_1.default.ensureFile(exports.opticrcPath);
        await fs_extra_1.default.writeFile(exports.opticrcPath, JSON.stringify(storeValue));
        return storeValue.anonymousId;
    }
    else {
        const storeValue = defaultStorage();
        await fs_extra_1.default.ensureFile(exports.opticrcPath);
        await fs_extra_1.default.writeFile(exports.opticrcPath, JSON.stringify(storeValue));
        return storeValue.anonymousId;
    }
}
exports.getOrCreateAnonId = getOrCreateAnonId;
