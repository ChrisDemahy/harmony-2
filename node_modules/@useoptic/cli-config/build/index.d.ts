import { parseRule, parseIgnore, IIgnoreRunnable } from './helpers/ignore-parser';
export { deprecationLogger } from './deprecations';
export interface IUserCredentials {
    token: string;
}
export interface IUser {
    sub: string;
    name: string;
    email: string;
}
export interface ITestingConfig {
    authToken: string;
}
export interface IOpticTask {
    command?: string;
    baseUrl?: string;
    proxy?: string;
    useTask?: string;
    targetUrl?: string;
}
export interface IOpticScript {
    command: string;
    dependsOn?: string | string[];
    install?: string;
}
export interface IOpticTaskAliases {
    inboundUrl?: string;
}
export declare type IOpticTaskAliased = Partial<IOpticTask> & IOpticTaskAliases;
export interface IApiCliConfig {
    name: string;
    tasks: {
        [key: string]: IOpticTask;
    };
    scripts?: {
        [key: string]: string | IOpticScript;
    };
    ignoreRequests?: string[];
}
export declare function readApiConfig(configPath: string): Promise<IApiCliConfig>;
export declare function readTestingConfig(testingConfigPath: string): Promise<ITestingConfig>;
export interface IOpticCliInitConfig {
    type: 'init';
}
export declare class InvalidOpticConfigurationSyntaxError extends Error {
}
export declare class OpticConfigurationLocationFailure extends Error {
}
export declare class CommandExecutionFailure extends Error {
}
export declare class TargetPortUnavailableError extends Error {
}
export declare class TaskNotFoundError extends Error {
}
export declare class RunsWithTaskNotFoundError extends Error {
}
export interface IOpticCaptureConfig {
    persistenceEngine: 'fs' | 's3';
    captureId: string;
    captureDirectory: string;
}
export interface IOpticApiRunConfig {
    type: 'run';
    captureConfig: IOpticCaptureConfig;
    serviceConfig: {
        port: number;
        host: string;
        protocol: string;
        basePath: string;
    };
    proxyConfig: {
        port: number;
        host: string;
        protocol: string;
        basePath: string;
    };
}
export interface IOpticApiInterceptConfig {
    type: 'intercept';
}
export interface IOpticTaskRunnerConfig {
    command?: string;
    serviceConfig: {
        port: number;
        host: string;
        protocol: string;
        basePath: string;
    };
    proxyConfig: {
        port: number;
        host: string;
        protocol: string;
        basePath: string;
    };
}
export declare function isTestTask(aliasedTask: IOpticTaskAliased): boolean;
export declare function isRecommendedTask(aliasedTask: IOpticTaskAliased): boolean;
export declare function isManualTask(aliasedTask: IOpticTaskAliased): boolean;
export declare function TaskToStartConfig(aliasedTask: IOpticTaskAliased): Promise<IOpticTaskRunnerConfig>;
export interface IPathMapping {
    cwd: string;
    basePath: string;
    specStorePath: string;
    configPath: string;
    gitignorePath: string;
    opticIgnorePath: string;
    capturesPath: string;
    exampleRequestsPath: string;
    testingConfigPath: string;
}
export declare function getPathsRelativeToConfig(): Promise<IPathMapping>;
export declare function pathsFromCwd(cwd: string): IPathMapping;
export declare function getPathsRelativeToCwd(cwd: string): Promise<IPathMapping>;
export declare function createFileTree(config: string, basePath: string): Promise<{
    configPath: string;
    basePath: string;
    capturesPath: string;
}>;
export interface ITestingConfig {
    authToken: string;
}
export declare enum Modes {
    Recommended = "Recommended",
    Manual = "Manual",
    Test = "Test"
}
export { parseIgnore, parseRule, IIgnoreRunnable };
//# sourceMappingURL=index.d.ts.map