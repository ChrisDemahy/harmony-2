"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiCheckCompleted = exports.ApiInitializedInProject = exports.UserLoggedInFromCLI = exports.ApiCreated = void 0;
const tslib_1 = require("tslib");
const RegisterEvent_1 = require("../interfaces/RegisterEvent");
const Events_1 = require("../interfaces/Events");
// @ts-ignore
const Joi = tslib_1.__importStar(require("@hapi/joi"));
require("joi-extract-type");
// Sent whenever an API is created
const ApiCreatedSchema = Joi.object({ apiName: Joi.string().required() });
exports.ApiCreated = RegisterEvent_1.DescribeEvent(Events_1.Events.ApiCreated, ApiCreatedSchema, (props) => `An API called ${props.apiName} was created`);
const UserLoggedInFromCLISchema = Joi.object({
    userId: Joi.string().required(),
});
exports.UserLoggedInFromCLI = RegisterEvent_1.DescribeEvent(Events_1.Events.UserLoggedInFromCLI, UserLoggedInFromCLISchema, (props) => `User ${props.userId} logged in`);
const ApiInitializedInProjectSchema = Joi.object({
    apiName: Joi.string().required(),
    source: Joi.string().required(),
    cwd: Joi.string().required(),
});
exports.ApiInitializedInProject = RegisterEvent_1.DescribeEvent(Events_1.Events.ApiInitializedInProject, ApiInitializedInProjectSchema, (props) => `An API called ${props.apiName} was initialized in ${props.cwd}`);
const ApiCheckCompletedSchema = Joi.any();
exports.ApiCheckCompleted = RegisterEvent_1.DescribeEvent(Events_1.Events.ApiCheckCompleted, ApiCheckCompletedSchema, (props) => `API Check for ${props.mode} task: ${props.taskName} ${props.passed ? 'passed' : 'failed'} `);
