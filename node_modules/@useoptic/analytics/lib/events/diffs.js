"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateContribution = exports.ShowInitialDocumentingView = exports.AddUrlModalIdentifyingPathComponents = exports.AddUrlModalNaming = exports.UserCommittedChanges = exports.ShowCommitCard = exports.UserResetDiff = exports.UserPreviewedSuggestion = exports.UserAcceptedSuggestion = exports.SuggestionDisplayed = exports.UserFinishedAddingNewUrl = exports.UserBeganAddingNewUrl = exports.UserEnabledInferPolymorphism = exports.NewBodyDiffRendered = exports.UserChangedCaptureOverviewTab = void 0;
const tslib_1 = require("tslib");
const RegisterEvent_1 = require("../interfaces/RegisterEvent");
const Events_1 = require("../interfaces/Events");
// @ts-ignore
const Joi = tslib_1.__importStar(require("@hapi/joi"));
require("joi-extract-type");
// Sent whenever an API is created
const UserChangedCaptureOverviewTabSchema = Joi.object({
    currentTab: Joi.string().required(),
    diffCount: Joi.number().required(),
    undocumentedUrlCount: Joi.number().required(),
});
exports.UserChangedCaptureOverviewTab = RegisterEvent_1.DescribeEvent(Events_1.Events.UserChangedCaptureOverviewTab, UserChangedCaptureOverviewTabSchema, (props) => `User changed to ${props.currentTab} and there are ${props.diffCount} diffs + ${props.undocumentedUrlCount} undocumented urls`);
const NewBodyDiffRenderedSchema = Joi.object({
    requestCount: Joi.number().required(),
    responseCount: Joi.number().required(),
    regions: Joi.array().required().items(Joi.string()),
});
exports.NewBodyDiffRendered = RegisterEvent_1.DescribeEvent(Events_1.Events.NewBodyDiffRendered, NewBodyDiffRenderedSchema, (props) => `Diff was rendered in regions ${props.regions.join(', \n')}`);
const InferPolymorphismEnabledSchema = Joi.object({
    captureId: Joi.string().required(),
    endpointId: Joi.string().required(),
});
exports.UserEnabledInferPolymorphism = RegisterEvent_1.DescribeEvent(Events_1.Events.UserEnabledInferPolymorphism, InferPolymorphismEnabledSchema, (props) => `Infer Polymorphism was turned on for ${props.captureId}, endpoint ${props.endpointId}`);
const UserBeganAddingNewUrlSchema = Joi.object({
    captureId: Joi.string().required(),
    method: Joi.string().required(),
    path: Joi.string().required(),
    knownPathId: Joi.string().optional(),
});
exports.UserBeganAddingNewUrl = RegisterEvent_1.DescribeEvent(Events_1.Events.UserBeganAddingNewUrl, UserBeganAddingNewUrlSchema, (props) => `User Began Adding New Url ${props.method} ${props.path} in ${props.captureId}`);
const UserFinishedAddingNewUrlSchema = Joi.object({
    purpose: Joi.string().required(),
    captureId: Joi.string().required(),
    method: Joi.string().required(),
    pathExpression: Joi.string().optional(),
});
exports.UserFinishedAddingNewUrl = RegisterEvent_1.DescribeEvent(Events_1.Events.UserFinishedAddingNewUrl, UserFinishedAddingNewUrlSchema, (props) => `User Added New Url ${props.method} ${props.pathExpression} in ${props.captureId} with purpose '${props.pathExpression}'`);
const SuggestionDisplayedSchema = Joi.object({
    suggestion: Joi.string().required(),
});
exports.SuggestionDisplayed = RegisterEvent_1.DescribeEvent(Events_1.Events.SuggestionDisplayed, SuggestionDisplayedSchema, (props) => `Summary: '${props.suggestion}' `);
const SuggestionAcceptedSchema = Joi.object({
    captureId: Joi.string().required(),
    suggestion: Joi.string().required(),
});
exports.UserAcceptedSuggestion = RegisterEvent_1.DescribeEvent(Events_1.Events.UserAcceptedSuggestion, SuggestionAcceptedSchema, (props) => `Suggestion to '${props.suggestion}' was accepted`);
const UserPreviewedSuggestionSchema = Joi.object({
    captureId: Joi.string().required(),
    diff: Joi.string().required(),
    diffAssertion: Joi.string().required(),
    suggestion: Joi.string().required(),
});
exports.UserPreviewedSuggestion = RegisterEvent_1.DescribeEvent(Events_1.Events.UserPreviewedSuggestion, UserPreviewedSuggestionSchema, (props) => `Suggestion to '${props.suggestion}' was previewed in response to diff: ${props.diff}`);
const UserResetDiffSchema = Joi.object({});
exports.UserResetDiff = RegisterEvent_1.DescribeEvent(Events_1.Events.UserResetDiff, UserResetDiffSchema, (props) => `The Diff Was Reset`);
const ShowCommitCardSchema = Joi.object({
    message: Joi.string().required(),
    captureId: Joi.string().required(),
    suggestions: Joi.number().required(),
});
exports.ShowCommitCard = RegisterEvent_1.DescribeEvent(Events_1.Events.ShowCommitCard, ShowCommitCardSchema, (props) => `Commit Card Rendered`);
const UserCommittedChangesSchema = Joi.object({
    message: Joi.string().required(),
    captureId: Joi.string().required(),
    suggestions: Joi.number().required(),
});
exports.UserCommittedChanges = RegisterEvent_1.DescribeEvent(Events_1.Events.UserCommittedChanges, UserCommittedChangesSchema, (props) => `The Diff Was Reset`);
const AddUrlModalNamingSchema = Joi.object({
    method: Joi.string().required(),
    path: Joi.string().required(),
});
exports.AddUrlModalNaming = RegisterEvent_1.DescribeEvent(Events_1.Events.AddUrlModalNaming, AddUrlModalNamingSchema, (props) => `Currently naming ${props.method} ${props.path}`);
const AddUrlModalIdentifyingPathComponentsSchema = Joi.object({
    method: Joi.string().required(),
    path: Joi.string().required(),
});
exports.AddUrlModalIdentifyingPathComponents = RegisterEvent_1.DescribeEvent(Events_1.Events.AddUrlModalIdentifyingPathComponents, AddUrlModalIdentifyingPathComponentsSchema, (props) => `Currently identifying path components for ${props.method} ${props.path}`);
const ShowInitialDocumentingViewSchema = Joi.object({});
exports.ShowInitialDocumentingView = RegisterEvent_1.DescribeEvent(Events_1.Events.ShowInitialDocumentingView, ShowInitialDocumentingViewSchema, () => `Showing initial documenting view`);
const UpdateContributionSchema = Joi.object({
    id: Joi.string().required(),
    purpose: Joi.string().required(),
    value: Joi.string().required(),
});
exports.UpdateContribution = RegisterEvent_1.DescribeEvent(Events_1.Events.UpdateContribution, UpdateContributionSchema, ({ id, purpose, value }) => `Updated ${id} - ${purpose} to be ${value}`);
