"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackWithSentry = void 0;
const Sentry = __importStar(require("@sentry/node"));
const os_1 = __importDefault(require("os"));
const optic_rc_1 = require("@useoptic/cli-config/build/opticrc/optic-rc");
function trackWithSentry({ dsn, serverName, environment, release, }) {
    if (!dsn)
        throw new Error(`Sentry DSN must be set to track errors for ${serverName}`);
    Sentry.init({
        dsn,
        serverName,
        environment,
        release,
        tracesSampleRate: 1.0,
    });
    const nodeVersion = process.version;
    const hostArch = process.arch;
    const hostPlatform = process.platform;
    const hostCpuCount = os_1.default.cpus().length.toString();
    const hostMemorySize = os_1.default.totalmem().toString();
    Sentry.setTags({
        nodeVersion,
        hostArch,
        hostPlatform,
        hostCpuCount,
        hostMemorySize,
    });
    optic_rc_1.getOrCreateAnonId().then((id) => {
        Sentry.setUser({
            id,
        });
    });
}
exports.trackWithSentry = trackWithSentry;
