"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const diff_worker_rust_1 = require("@useoptic/cli-shared/build/diffs/diff-worker-rust");
const dotenv_1 = __importDefault(require("dotenv"));
const path_1 = __importDefault(require("path"));
const config_1 = __importDefault(require("./config"));
const Errors = __importStar(require("./errors"));
const envPath = process.env.OPTIC_DEBUG_ENV_FILE || path_1.default.join(__dirname, '..', '.env');
dotenv_1.default.config({
    path: envPath,
});
if (config_1.default.errors.sentry) {
    Errors.trackWithSentry(config_1.default.errors.sentry);
    console.log('Remote error tracking with Sentry enabled');
}
async function run(config) {
    var e_1, _a;
    const worker = new diff_worker_rust_1.DiffWorkerRust(config);
    worker.events.once('error', onError);
    try {
        await worker.start();
        try {
            for (var _b = __asyncValues(worker.progress()), _c; _c = await _b.next(), !_c.done;) {
                let progress = _c.value;
                if (process && process.send) {
                    process.send({
                        type: 'progress',
                        data: progress,
                    });
                }
                else {
                    console.log(progress);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    catch (err) {
        onError(err);
    }
}
function onError(err) {
    if (process && process.send) {
        process.send({
            type: 'error',
            data: { message: err.message },
        });
    }
    throw err;
}
const [, , configJsonString] = process.argv;
const config = JSON.parse(configJsonString);
console.log({ config });
run(config).catch((e) => {
    console.error(e);
    throw e;
});
